import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { DomSanitizer, SafeStyle, SafeUrl } from '@angular/platform-browser';
import { CropperPosition, Dimensions, ImageCroppedEvent, ImageTransform } from '../interfaces';
import { MoveTypes } from '../interfaces/move-start.interface';
import * as ɵngcc0 from '@angular/core';
export declare class ImageCropperComponent implements OnChanges, OnInit {
    private sanitizer;
    private cd;
    private Hammer;
    private originalImage;
    private transformedImage;
    private originalBase64;
    private transformedBase64;
    private moveStart;
    private originalSize;
    private transformedSize;
    private setImageMaxSizeRetries;
    private cropperScaledMinWidth;
    private cropperScaledMinHeight;
    private exifTransform;
    private autoRotateSupported;
    private stepSize;
    safeImgDataUrl: SafeUrl | string;
    safeTransformStyle: SafeStyle | string;
    marginLeft: SafeStyle | string;
    maxSize: Dimensions;
    imageVisible: boolean;
    moveTypes: typeof MoveTypes;
    wrapper: ElementRef;
    sourceImage: ElementRef;
    imageChangedEvent: any;
    imageURL: string;
    imageBase64: string;
    imageFile: File;
    format: 'png' | 'jpeg' | 'bmp' | 'webp' | 'ico';
    maintainAspectRatio: boolean;
    transform: ImageTransform;
    aspectRatio: number;
    resizeToWidth: number;
    resizeToHeight: number;
    cropperMinWidth: number;
    cropperMinHeight: number;
    cropperStaticWidth: number;
    cropperStaticHeight: number;
    canvasRotation: number;
    initialStepSize: number;
    roundCropper: boolean;
    onlyScaleDown: boolean;
    imageQuality: number;
    autoCrop: boolean;
    backgroundColor: string;
    containWithinAspectRatio: boolean;
    hideResizeSquares: boolean;
    cropper: CropperPosition;
    alignImage: 'left' | 'center';
    disabled: boolean;
    imageCropped: EventEmitter<ImageCroppedEvent>;
    startCropImage: EventEmitter<void>;
    imageLoaded: EventEmitter<void>;
    cropperReady: EventEmitter<Dimensions>;
    loadImageFailed: EventEmitter<void>;
    constructor(sanitizer: DomSanitizer, cd: ChangeDetectorRef);
    ngOnChanges(changes: SimpleChanges): void;
    private onChangesInputImage;
    private isValidImageChangedEvent;
    private setCssTransform;
    ngOnInit(): void;
    private initCropper;
    private loadImage;
    private loadImageFile;
    private isValidImageType;
    private loadBase64Image;
    private checkExifAndLoadBase64Image;
    private loadImageFromURL;
    private transformOriginalImage;
    private transformImageBase64;
    private getTransformedSize;
    private setTransformedImage;
    imageLoadedInView(): void;
    private checkImageMaxSizeRecursively;
    private sourceImageLoaded;
    onResize(): void;
    private activatePinchGesture;
    private resizeCropperPosition;
    resetCropperPosition(): void;
    keyboardAccess(event: any): void;
    private changeKeyboardStepSize;
    private keyboardMoveCropper;
    private getPositionForKey;
    private getInvertedPositionForKey;
    private getEventForKey;
    startMove(event: any, moveType: MoveTypes, position?: string | null): void;
    startPinch(event: any): void;
    moveImg(event: any): void;
    onPinch(event: any): void;
    private setMaxSize;
    private setCropperScaledMinSize;
    private setCropperScaledMinWidth;
    private setCropperScaledMinHeight;
    private checkCropperPosition;
    moveStop(): void;
    pinchStop(): void;
    private move;
    private resize;
    private checkAspectRatio;
    private doAutoCrop;
    crop(): ImageCroppedEvent | null;
    private getImagePosition;
    private getOffsetImagePosition;
    private cropToBase64;
    private getQuality;
    getResizeRatio(width: number, height: number): number;
    private getClientX;
    private getClientY;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ImageCropperComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ImageCropperComponent, "image-cropper", never, {
    "format": "format";
    "maintainAspectRatio": "maintainAspectRatio";
    "transform": "transform";
    "aspectRatio": "aspectRatio";
    "resizeToWidth": "resizeToWidth";
    "resizeToHeight": "resizeToHeight";
    "cropperMinWidth": "cropperMinWidth";
    "cropperMinHeight": "cropperMinHeight";
    "cropperStaticWidth": "cropperStaticWidth";
    "cropperStaticHeight": "cropperStaticHeight";
    "canvasRotation": "canvasRotation";
    "initialStepSize": "initialStepSize";
    "roundCropper": "roundCropper";
    "onlyScaleDown": "onlyScaleDown";
    "imageQuality": "imageQuality";
    "autoCrop": "autoCrop";
    "containWithinAspectRatio": "containWithinAspectRatio";
    "hideResizeSquares": "hideResizeSquares";
    "cropper": "cropper";
    "alignImage": "alignImage";
    "disabled": "disabled";
    "imageChangedEvent": "imageChangedEvent";
    "imageURL": "imageURL";
    "imageBase64": "imageBase64";
    "imageFile": "imageFile";
    "backgroundColor": "backgroundColor";
}, {
    "imageCropped": "imageCropped";
    "startCropImage": "startCropImage";
    "imageLoaded": "imageLoaded";
    "cropperReady": "cropperReady";
    "loadImageFailed": "loadImageFailed";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiaW1hZ2UtY3JvcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBNkdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBPbkluaXQsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlLCBTYWZlVXJsIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBDcm9wcGVyUG9zaXRpb24sIERpbWVuc2lvbnMsIEltYWdlQ3JvcHBlZEV2ZW50LCBJbWFnZVRyYW5zZm9ybSB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgTW92ZVR5cGVzIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9tb3ZlLXN0YXJ0LmludGVyZmFjZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBJbWFnZUNyb3BwZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCB7XG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBwcml2YXRlIEhhbW1lcjtcbiAgICBwcml2YXRlIG9yaWdpbmFsSW1hZ2U7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1lZEltYWdlO1xuICAgIHByaXZhdGUgb3JpZ2luYWxCYXNlNjQ7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1lZEJhc2U2NDtcbiAgICBwcml2YXRlIG1vdmVTdGFydDtcbiAgICBwcml2YXRlIG9yaWdpbmFsU2l6ZTtcbiAgICBwcml2YXRlIHRyYW5zZm9ybWVkU2l6ZTtcbiAgICBwcml2YXRlIHNldEltYWdlTWF4U2l6ZVJldHJpZXM7XG4gICAgcHJpdmF0ZSBjcm9wcGVyU2NhbGVkTWluV2lkdGg7XG4gICAgcHJpdmF0ZSBjcm9wcGVyU2NhbGVkTWluSGVpZ2h0O1xuICAgIHByaXZhdGUgZXhpZlRyYW5zZm9ybTtcbiAgICBwcml2YXRlIGF1dG9Sb3RhdGVTdXBwb3J0ZWQ7XG4gICAgcHJpdmF0ZSBzdGVwU2l6ZTtcbiAgICBzYWZlSW1nRGF0YVVybDogU2FmZVVybCB8IHN0cmluZztcbiAgICBzYWZlVHJhbnNmb3JtU3R5bGU6IFNhZmVTdHlsZSB8IHN0cmluZztcbiAgICBtYXJnaW5MZWZ0OiBTYWZlU3R5bGUgfCBzdHJpbmc7XG4gICAgbWF4U2l6ZTogRGltZW5zaW9ucztcbiAgICBpbWFnZVZpc2libGU6IGJvb2xlYW47XG4gICAgbW92ZVR5cGVzOiB0eXBlb2YgTW92ZVR5cGVzO1xuICAgIHdyYXBwZXI6IEVsZW1lbnRSZWY7XG4gICAgc291cmNlSW1hZ2U6IEVsZW1lbnRSZWY7XG4gICAgaW1hZ2VDaGFuZ2VkRXZlbnQ6IGFueTtcbiAgICBpbWFnZVVSTDogc3RyaW5nO1xuICAgIGltYWdlQmFzZTY0OiBzdHJpbmc7XG4gICAgaW1hZ2VGaWxlOiBGaWxlO1xuICAgIGZvcm1hdDogJ3BuZycgfCAnanBlZycgfCAnYm1wJyB8ICd3ZWJwJyB8ICdpY28nO1xuICAgIG1haW50YWluQXNwZWN0UmF0aW86IGJvb2xlYW47XG4gICAgdHJhbnNmb3JtOiBJbWFnZVRyYW5zZm9ybTtcbiAgICBhc3BlY3RSYXRpbzogbnVtYmVyO1xuICAgIHJlc2l6ZVRvV2lkdGg6IG51bWJlcjtcbiAgICByZXNpemVUb0hlaWdodDogbnVtYmVyO1xuICAgIGNyb3BwZXJNaW5XaWR0aDogbnVtYmVyO1xuICAgIGNyb3BwZXJNaW5IZWlnaHQ6IG51bWJlcjtcbiAgICBjcm9wcGVyU3RhdGljV2lkdGg6IG51bWJlcjtcbiAgICBjcm9wcGVyU3RhdGljSGVpZ2h0OiBudW1iZXI7XG4gICAgY2FudmFzUm90YXRpb246IG51bWJlcjtcbiAgICBpbml0aWFsU3RlcFNpemU6IG51bWJlcjtcbiAgICByb3VuZENyb3BwZXI6IGJvb2xlYW47XG4gICAgb25seVNjYWxlRG93bjogYm9vbGVhbjtcbiAgICBpbWFnZVF1YWxpdHk6IG51bWJlcjtcbiAgICBhdXRvQ3JvcDogYm9vbGVhbjtcbiAgICBiYWNrZ3JvdW5kQ29sb3I6IHN0cmluZztcbiAgICBjb250YWluV2l0aGluQXNwZWN0UmF0aW86IGJvb2xlYW47XG4gICAgaGlkZVJlc2l6ZVNxdWFyZXM6IGJvb2xlYW47XG4gICAgY3JvcHBlcjogQ3JvcHBlclBvc2l0aW9uO1xuICAgIGFsaWduSW1hZ2U6ICdsZWZ0JyB8ICdjZW50ZXInO1xuICAgIGRpc2FibGVkOiBib29sZWFuO1xuICAgIGltYWdlQ3JvcHBlZDogRXZlbnRFbWl0dGVyPEltYWdlQ3JvcHBlZEV2ZW50PjtcbiAgICBzdGFydENyb3BJbWFnZTogRXZlbnRFbWl0dGVyPHZvaWQ+O1xuICAgIGltYWdlTG9hZGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY3JvcHBlclJlYWR5OiBFdmVudEVtaXR0ZXI8RGltZW5zaW9ucz47XG4gICAgbG9hZEltYWdlRmFpbGVkOiBFdmVudEVtaXR0ZXI8dm9pZD47XG4gICAgY29uc3RydWN0b3Ioc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBvbkNoYW5nZXNJbnB1dEltYWdlO1xuICAgIHByaXZhdGUgaXNWYWxpZEltYWdlQ2hhbmdlZEV2ZW50O1xuICAgIHByaXZhdGUgc2V0Q3NzVHJhbnNmb3JtO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBpbml0Q3JvcHBlcjtcbiAgICBwcml2YXRlIGxvYWRJbWFnZTtcbiAgICBwcml2YXRlIGxvYWRJbWFnZUZpbGU7XG4gICAgcHJpdmF0ZSBpc1ZhbGlkSW1hZ2VUeXBlO1xuICAgIHByaXZhdGUgbG9hZEJhc2U2NEltYWdlO1xuICAgIHByaXZhdGUgY2hlY2tFeGlmQW5kTG9hZEJhc2U2NEltYWdlO1xuICAgIHByaXZhdGUgbG9hZEltYWdlRnJvbVVSTDtcbiAgICBwcml2YXRlIHRyYW5zZm9ybU9yaWdpbmFsSW1hZ2U7XG4gICAgcHJpdmF0ZSB0cmFuc2Zvcm1JbWFnZUJhc2U2NDtcbiAgICBwcml2YXRlIGdldFRyYW5zZm9ybWVkU2l6ZTtcbiAgICBwcml2YXRlIHNldFRyYW5zZm9ybWVkSW1hZ2U7XG4gICAgaW1hZ2VMb2FkZWRJblZpZXcoKTogdm9pZDtcbiAgICBwcml2YXRlIGNoZWNrSW1hZ2VNYXhTaXplUmVjdXJzaXZlbHk7XG4gICAgcHJpdmF0ZSBzb3VyY2VJbWFnZUxvYWRlZDtcbiAgICBvblJlc2l6ZSgpOiB2b2lkO1xuICAgIHByaXZhdGUgYWN0aXZhdGVQaW5jaEdlc3R1cmU7XG4gICAgcHJpdmF0ZSByZXNpemVDcm9wcGVyUG9zaXRpb247XG4gICAgcmVzZXRDcm9wcGVyUG9zaXRpb24oKTogdm9pZDtcbiAgICBrZXlib2FyZEFjY2VzcyhldmVudDogYW55KTogdm9pZDtcbiAgICBwcml2YXRlIGNoYW5nZUtleWJvYXJkU3RlcFNpemU7XG4gICAgcHJpdmF0ZSBrZXlib2FyZE1vdmVDcm9wcGVyO1xuICAgIHByaXZhdGUgZ2V0UG9zaXRpb25Gb3JLZXk7XG4gICAgcHJpdmF0ZSBnZXRJbnZlcnRlZFBvc2l0aW9uRm9yS2V5O1xuICAgIHByaXZhdGUgZ2V0RXZlbnRGb3JLZXk7XG4gICAgc3RhcnRNb3ZlKGV2ZW50OiBhbnksIG1vdmVUeXBlOiBNb3ZlVHlwZXMsIHBvc2l0aW9uPzogc3RyaW5nIHwgbnVsbCk6IHZvaWQ7XG4gICAgc3RhcnRQaW5jaChldmVudDogYW55KTogdm9pZDtcbiAgICBtb3ZlSW1nKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIG9uUGluY2goZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBzZXRNYXhTaXplO1xuICAgIHByaXZhdGUgc2V0Q3JvcHBlclNjYWxlZE1pblNpemU7XG4gICAgcHJpdmF0ZSBzZXRDcm9wcGVyU2NhbGVkTWluV2lkdGg7XG4gICAgcHJpdmF0ZSBzZXRDcm9wcGVyU2NhbGVkTWluSGVpZ2h0O1xuICAgIHByaXZhdGUgY2hlY2tDcm9wcGVyUG9zaXRpb247XG4gICAgbW92ZVN0b3AoKTogdm9pZDtcbiAgICBwaW5jaFN0b3AoKTogdm9pZDtcbiAgICBwcml2YXRlIG1vdmU7XG4gICAgcHJpdmF0ZSByZXNpemU7XG4gICAgcHJpdmF0ZSBjaGVja0FzcGVjdFJhdGlvO1xuICAgIHByaXZhdGUgZG9BdXRvQ3JvcDtcbiAgICBjcm9wKCk6IEltYWdlQ3JvcHBlZEV2ZW50IHwgbnVsbDtcbiAgICBwcml2YXRlIGdldEltYWdlUG9zaXRpb247XG4gICAgcHJpdmF0ZSBnZXRPZmZzZXRJbWFnZVBvc2l0aW9uO1xuICAgIHByaXZhdGUgY3JvcFRvQmFzZTY0O1xuICAgIHByaXZhdGUgZ2V0UXVhbGl0eTtcbiAgICBnZXRSZXNpemVSYXRpbyh3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcik6IG51bWJlcjtcbiAgICBwcml2YXRlIGdldENsaWVudFg7XG4gICAgcHJpdmF0ZSBnZXRDbGllbnRZO1xufVxuIl19