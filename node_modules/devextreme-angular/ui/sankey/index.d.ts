/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { format } from 'devextreme/ui/widget/ui.widget';
import { Font } from 'devextreme/viz/core/base_widget';
import DxSankey from 'devextreme/viz/sankey';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/** The Sankey is a widget that visualizes the flow magnitude between value sets. The values being connected are called nodes; the connections - links. The higher the flow magnitude, the wider the link is. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxSankeyComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSankey;
    /** Specifies adaptive layout options. */
    adaptiveLayout: {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    };
    /** Aligns node columns vertically. */
    alignment: string | Array<string>;
    /** Binds the widget to data. */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Configures the exporting and printing features. */
    export: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    };
    /** Specifies whether nodes and links change their style when they are hovered over or pressed. */
    hoverEnabled: boolean;
    /** Configures sankey nodes' labels. */
    label: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: DevExpress.viz.Font;
        horizontalOffset?: number;
        overlappingBehavior?: string;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        useNodeColors?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    };
    /** Configures sankey links' appearance. */
    link: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        colorMode?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: string;
            hatching?: {
                direction?: string;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
    };
    /** Configures the loading indicator. */
    loadingIndicator: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    /** Generates space around the widget. */
    margin: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    /** Configures sankey nodes' appearance. */
    node: {
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: string;
            hatching?: {
                direction?: string;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
        padding?: number;
        width?: number;
    };
    /** Sets the palette to be used to colorize sankey nodes. */
    palette: string | Array<string>;
    /** Specifies how to extend the palette when it contains less colors than the number of sankey nodes. */
    paletteExtensionMode: string;
    /** Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path. */
    pathModified: boolean;
    /** Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates. */
    redrawOnResize: boolean;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies the widget's size in pixels. */
    size: {
        height?: number;
        width?: number;
    };
    /** Specifies nodes' sorting order in their columns. */
    sortData: any;
    /** Specifies which data source field provides links' source nodes. */
    sourceField: string;
    /** Specifies which data source field provides links' target nodes. */
    targetField: string;
    /** Sets the name of the theme the widget uses. */
    theme: string;
    /** Configures the widget's title. */
    title: string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    /** Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer. */
    tooltip: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: Element | JQuery | string;
        cornerRadius?: number;
        customizeLinkTooltip?: Function;
        customizeNodeTooltip?: Function;
        enabled?: boolean;
        font?: Font;
        format?: format | string;
        linkTooltipTemplate?: any;
        nodeTooltipTemplate?: any;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number;
    };
    /** Specifies which data source field provides links' weights. */
    weightField: string;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function that is executed when the widget's rendering has finished. */
    onDrawn: EventEmitter<any>;
    /** A function that is executed after the widget is exported. */
    onExported: EventEmitter<any>;
    /** A function that is executed before the widget is exported. */
    onExporting: EventEmitter<any>;
    /** A function that is executed before a file with exported widget is saved to the user's local storage. */
    onFileSaving: EventEmitter<any>;
    /** A function that is executed when an error or warning occurs. */
    onIncidentOccurred: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed when a sankey link is clicked or tapped. */
    onLinkClick: EventEmitter<any>;
    /** A function that is executed after the pointer enters or leaves a sankey link. */
    onLinkHoverChanged: EventEmitter<any>;
    /** A function that is executed when a sankey node is clicked or tapped. */
    onNodeClick: EventEmitter<any>;
    /** A function that is executed after the pointer enters or leaves a sankey node. */
    onNodeHoverChanged: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    adaptiveLayoutChange: EventEmitter<{
        height?: number;
        keepLabels?: boolean;
        width?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    alignmentChange: EventEmitter<string | Array<string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    labelChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        customizeText?: Function;
        font?: DevExpress.viz.Font;
        horizontalOffset?: number;
        overlappingBehavior?: string;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        useNodeColors?: boolean;
        verticalOffset?: number;
        visible?: boolean;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    linkChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        colorMode?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: string;
            hatching?: {
                direction?: string;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    nodeChange: EventEmitter<{
        border?: {
            color?: string;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                visible?: boolean;
                width?: number;
            };
            color?: string;
            hatching?: {
                direction?: string;
                opacity?: number;
                step?: number;
                width?: number;
            };
            opacity?: number;
        };
        opacity?: number;
        padding?: number;
        width?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    paletteChange: EventEmitter<string | Array<string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    paletteExtensionModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pathModifiedChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    redrawOnResizeChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    sizeChange: EventEmitter<{
        height?: number;
        width?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    sortDataChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    sourceFieldChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    targetFieldChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    themeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: Element | JQuery | string;
        cornerRadius?: number;
        customizeLinkTooltip?: Function;
        customizeNodeTooltip?: Function;
        enabled?: boolean;
        font?: Font;
        format?: format | string;
        linkTooltipTemplate?: any;
        nodeTooltipTemplate?: any;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    weightFieldChange: EventEmitter<string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSankey;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxSankeyComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxSankeyComponent, "dx-sankey", never, {
    "adaptiveLayout": "adaptiveLayout";
    "alignment": "alignment";
    "dataSource": "dataSource";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "export": "export";
    "hoverEnabled": "hoverEnabled";
    "label": "label";
    "link": "link";
    "loadingIndicator": "loadingIndicator";
    "margin": "margin";
    "node": "node";
    "palette": "palette";
    "paletteExtensionMode": "paletteExtensionMode";
    "pathModified": "pathModified";
    "redrawOnResize": "redrawOnResize";
    "rtlEnabled": "rtlEnabled";
    "size": "size";
    "sortData": "sortData";
    "sourceField": "sourceField";
    "targetField": "targetField";
    "theme": "theme";
    "title": "title";
    "tooltip": "tooltip";
    "weightField": "weightField";
}, {
    "onDisposing": "onDisposing";
    "onDrawn": "onDrawn";
    "onExported": "onExported";
    "onExporting": "onExporting";
    "onFileSaving": "onFileSaving";
    "onIncidentOccurred": "onIncidentOccurred";
    "onInitialized": "onInitialized";
    "onLinkClick": "onLinkClick";
    "onLinkHoverChanged": "onLinkHoverChanged";
    "onNodeClick": "onNodeClick";
    "onNodeHoverChanged": "onNodeHoverChanged";
    "onOptionChanged": "onOptionChanged";
    "adaptiveLayoutChange": "adaptiveLayoutChange";
    "alignmentChange": "alignmentChange";
    "dataSourceChange": "dataSourceChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "exportChange": "exportChange";
    "hoverEnabledChange": "hoverEnabledChange";
    "labelChange": "labelChange";
    "linkChange": "linkChange";
    "loadingIndicatorChange": "loadingIndicatorChange";
    "marginChange": "marginChange";
    "nodeChange": "nodeChange";
    "paletteChange": "paletteChange";
    "paletteExtensionModeChange": "paletteExtensionModeChange";
    "pathModifiedChange": "pathModifiedChange";
    "redrawOnResizeChange": "redrawOnResizeChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "sizeChange": "sizeChange";
    "sortDataChange": "sortDataChange";
    "sourceFieldChange": "sourceFieldChange";
    "targetFieldChange": "targetFieldChange";
    "themeChange": "themeChange";
    "titleChange": "titleChange";
    "tooltipChange": "tooltipChange";
    "weightFieldChange": "weightFieldChange";
}, never>;
}
export declare class DxSankeyModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxSankeyModule, [typeof DxSankeyComponent], [typeof ɵngcc1.DxoAdaptiveLayoutModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc1.DxoLinkModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoHatchingModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoNodeModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxSankeyComponent, typeof ɵngcc1.DxoAdaptiveLayoutModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc1.DxoLinkModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoHatchingModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoNodeModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxSankeyModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,