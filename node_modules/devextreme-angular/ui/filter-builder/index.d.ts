/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxFilterBuilder from 'devextreme/ui/filter_builder';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiCustomOperationComponent } from 'devextreme-angular/ui/nested';
import { DxiFieldComponent } from 'devextreme-angular/ui/nested';
/** The FilterBuilder widget allows a user to build complex filter expressions with an unlimited number of filter conditions, combined by logical operations using the UI. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxFilterBuilderComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxFilterBuilder;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether or not the widget changes its state when interacting with a user. */
    activeStateEnabled: boolean;
    /** Specifies whether the widget can display hierarchical data fields. */
    allowHierarchicalFields: boolean;
    /** Configures custom filter operations. */
    customOperations: Array<DevExpress.ui.dxFilterBuilderCustomOperation>;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Configures fields. */
    fields: Array<DevExpress.ui.dxFilterBuilderField>;
    /** Specifies filter operation descriptions. */
    filterOperationDescriptions: {
        between?: string;
        contains?: string;
        endsWith?: string;
        equal?: string;
        greaterThan?: string;
        greaterThanOrEqual?: string;
        isBlank?: string;
        isNotBlank?: string;
        lessThan?: string;
        lessThanOrEqual?: string;
        notContains?: string;
        notEqual?: string;
        startsWith?: string;
    };
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** Specifies group operation descriptions. */
    groupOperationDescriptions: {
        and?: string;
        notAnd?: string;
        notOr?: string;
        or?: string;
    };
    /** Specifies a set of available group operations. */
    groupOperations: Array<string>;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies groups' maximum nesting level. */
    maxGroupLevel: number;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** Allows you to specify a filter. */
    value: any;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function that is executed after an editor is created. */
    onEditorPrepared: EventEmitter<any>;
    /** A function that is executed before an editor is created. */
    onEditorPreparing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed after the widget's value is changed. */
    onValueChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    activeStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    allowHierarchicalFieldsChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    customOperationsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderCustomOperation>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    fieldsChange: EventEmitter<Array<DevExpress.ui.dxFilterBuilderField>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    filterOperationDescriptionsChange: EventEmitter<{
        between?: string;
        contains?: string;
        endsWith?: string;
        equal?: string;
        greaterThan?: string;
        greaterThanOrEqual?: string;
        isBlank?: string;
        isNotBlank?: string;
        lessThan?: string;
        lessThanOrEqual?: string;
        notContains?: string;
        notEqual?: string;
        startsWith?: string;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupOperationDescriptionsChange: EventEmitter<{
        and?: string;
        notAnd?: string;
        notOr?: string;
        or?: string;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupOperationsChange: EventEmitter<Array<string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxGroupLevelChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    customOperationsChildren: QueryList<DxiCustomOperationComponent>;
    fieldsChildren: QueryList<DxiFieldComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxFilterBuilder;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxFilterBuilderComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxFilterBuilderComponent, "dx-filter-builder", never, {
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "allowHierarchicalFields": "allowHierarchicalFields";
    "customOperations": "customOperations";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "fields": "fields";
    "filterOperationDescriptions": "filterOperationDescriptions";
    "focusStateEnabled": "focusStateEnabled";
    "groupOperationDescriptions": "groupOperationDescriptions";
    "groupOperations": "groupOperations";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "maxGroupLevel": "maxGroupLevel";
    "rtlEnabled": "rtlEnabled";
    "tabIndex": "tabIndex";
    "value": "value";
    "visible": "visible";
    "width": "width";
}, {
    "onContentReady": "onContentReady";
    "onDisposing": "onDisposing";
    "onEditorPrepared": "onEditorPrepared";
    "onEditorPreparing": "onEditorPreparing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "onValueChanged": "onValueChanged";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "allowHierarchicalFieldsChange": "allowHierarchicalFieldsChange";
    "customOperationsChange": "customOperationsChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "fieldsChange": "fieldsChange";
    "filterOperationDescriptionsChange": "filterOperationDescriptionsChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "groupOperationDescriptionsChange": "groupOperationDescriptionsChange";
    "groupOperationsChange": "groupOperationsChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "maxGroupLevelChange": "maxGroupLevelChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "tabIndexChange": "tabIndexChange";
    "valueChange": "valueChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
    "onBlur": "onBlur";
}, ["customOperationsChildren", "fieldsChildren"]>;
}
export declare class DxFilterBuilderModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxFilterBuilderModule, [typeof DxFilterBuilderComponent], [typeof ɵngcc1.DxiCustomOperationModule, typeof ɵngcc1.DxiFieldModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoLookupModule, typeof ɵngcc1.DxoFilterOperationDescriptionsModule, typeof ɵngcc1.DxoGroupOperationDescriptionsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxFilterBuilderComponent, typeof ɵngcc1.DxiCustomOperationModule, typeof ɵngcc1.DxiFieldModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoLookupModule, typeof ɵngcc1.DxoFilterOperationDescriptionsModule, typeof ɵngcc1.DxoGroupOperationDescriptionsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxFilterBuilderModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,