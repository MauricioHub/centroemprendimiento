/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxScrollView from 'devextreme/ui/scroll_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/** The ScrollView is a widget that enables a user to scroll its content. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxScrollViewComponent extends DxComponent implements OnDestroy {
    instance: DxScrollView;
    /** A Boolean value specifying whether to enable or disable the bounce-back effect. */
    bounceEnabled: boolean;
    /** A string value specifying the available scrolling directions. */
    direction: string;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies the text shown in the pullDown panel when pulling the content down lowers the refresh threshold. */
    pulledDownText: string;
    /** Specifies the text shown in the pullDown panel while pulling the content down to the refresh threshold. */
    pullingDownText: string;
    /** Specifies the text shown in the pullDown panel displayed when content is scrolled to the bottom. */
    reachBottomText: string;
    /** Specifies the text shown in the pullDown panel displayed when the content is being refreshed. */
    refreshingText: string;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** A Boolean value specifying whether or not an end-user can scroll the widget content swiping it up or down. Applies only if useNative is false */
    scrollByContent: boolean;
    /** A Boolean value specifying whether or not an end-user can scroll the widget content using the scrollbar. */
    scrollByThumb: boolean;
    /** Specifies when the widget shows the scrollbar. */
    showScrollbar: string;
    /** Indicates whether to use native or simulated scrolling. */
    useNative: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed when the "pull to refresh" gesture is performed. Supported in mobile themes only. */
    onPullDown: EventEmitter<any>;
    /** A function that is executed when the content is scrolled down to the bottom. */
    onReachBottom: EventEmitter<any>;
    /** A function that is executed on each scroll gesture. */
    onScroll: EventEmitter<any>;
    /** A function that is executed each time the widget is updated. */
    onUpdated: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    bounceEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    directionChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pulledDownTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pullingDownTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    reachBottomTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    refreshingTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollByContentChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollByThumbChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showScrollbarChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    useNativeChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScrollView;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxScrollViewComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxScrollViewComponent, "dx-scroll-view", never, {
    "bounceEnabled": "bounceEnabled";
    "direction": "direction";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "height": "height";
    "pulledDownText": "pulledDownText";
    "pullingDownText": "pullingDownText";
    "reachBottomText": "reachBottomText";
    "refreshingText": "refreshingText";
    "rtlEnabled": "rtlEnabled";
    "scrollByContent": "scrollByContent";
    "scrollByThumb": "scrollByThumb";
    "showScrollbar": "showScrollbar";
    "useNative": "useNative";
    "width": "width";
}, {
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "onPullDown": "onPullDown";
    "onReachBottom": "onReachBottom";
    "onScroll": "onScroll";
    "onUpdated": "onUpdated";
    "bounceEnabledChange": "bounceEnabledChange";
    "directionChange": "directionChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "heightChange": "heightChange";
    "pulledDownTextChange": "pulledDownTextChange";
    "pullingDownTextChange": "pullingDownTextChange";
    "reachBottomTextChange": "reachBottomTextChange";
    "refreshingTextChange": "refreshingTextChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "scrollByContentChange": "scrollByContentChange";
    "scrollByThumbChange": "scrollByThumbChange";
    "showScrollbarChange": "showScrollbarChange";
    "useNativeChange": "useNativeChange";
    "widthChange": "widthChange";
}, never>;
}
export declare class DxScrollViewModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxScrollViewModule, [typeof DxScrollViewComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxScrollViewComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxScrollViewModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,