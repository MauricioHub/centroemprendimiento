/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxDraggable from 'devextreme/ui/draggable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/** Draggable is a user interface utility that allows widget elements to be dragged and dropped. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxDraggableComponent extends DxComponent implements OnDestroy {
    instance: DxDraggable;
    /** Enables automatic scrolling while dragging an item beyond the viewport. */
    autoScroll: boolean;
    /** Specifies a DOM element that limits the dragging area. */
    boundary: Element | JQuery | string;
    /** Allows a user to drag clones of items instead of actual items. */
    clone: boolean;
    /** Specifies a custom container in which the draggable item should be rendered. */
    container: Element | JQuery | string;
    /** Specifies the cursor offset from the dragged item. */
    cursorOffset: string | {
        x?: number;
        y?: number;
    };
    /** A container for custom data. */
    data: any;
    /** Specifies the directions in which an item can be dragged. */
    dragDirection: string;
    /** Specifies custom markup to be shown instead of the item being dragged. */
    dragTemplate: any;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Allows you to group several widgets, so that users can drag and drop items between them. */
    group: string;
    /** Specifies a CSS selector (ID or class) that should act as the drag handle(s) for the item(s). */
    handle: string;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies the distance in pixels from the edge of viewport at which scrolling should start. Applies only if autoScroll is true. */
    scrollSensitivity: number;
    /** Specifies the scrolling speed when dragging an item beyond the viewport. Applies only if autoScroll is true. */
    scrollSpeed: number;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function that is called when drag gesture is finished. */
    onDragEnd: EventEmitter<any>;
    /** A function that is called every time a draggable item is moved. */
    onDragMove: EventEmitter<any>;
    /** A function that is called when the drag gesture is initialized. */
    onDragStart: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    autoScrollChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    boundaryChange: EventEmitter<Element | JQuery | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    cloneChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    containerChange: EventEmitter<Element | JQuery | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    cursorOffsetChange: EventEmitter<string | {
        x?: number;
        y?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dragDirectionChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dragTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    handleChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollSensitivityChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollSpeedChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDraggable;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxDraggableComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxDraggableComponent, "dx-draggable", never, {
    "autoScroll": "autoScroll";
    "boundary": "boundary";
    "clone": "clone";
    "container": "container";
    "cursorOffset": "cursorOffset";
    "data": "data";
    "dragDirection": "dragDirection";
    "dragTemplate": "dragTemplate";
    "elementAttr": "elementAttr";
    "group": "group";
    "handle": "handle";
    "height": "height";
    "rtlEnabled": "rtlEnabled";
    "scrollSensitivity": "scrollSensitivity";
    "scrollSpeed": "scrollSpeed";
    "width": "width";
}, {
    "onDisposing": "onDisposing";
    "onDragEnd": "onDragEnd";
    "onDragMove": "onDragMove";
    "onDragStart": "onDragStart";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "autoScrollChange": "autoScrollChange";
    "boundaryChange": "boundaryChange";
    "cloneChange": "cloneChange";
    "containerChange": "containerChange";
    "cursorOffsetChange": "cursorOffsetChange";
    "dataChange": "dataChange";
    "dragDirectionChange": "dragDirectionChange";
    "dragTemplateChange": "dragTemplateChange";
    "elementAttrChange": "elementAttrChange";
    "groupChange": "groupChange";
    "handleChange": "handleChange";
    "heightChange": "heightChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "scrollSensitivityChange": "scrollSensitivityChange";
    "scrollSpeedChange": "scrollSpeedChange";
    "widthChange": "widthChange";
}, never>;
}
export declare class DxDraggableModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxDraggableModule, [typeof DxDraggableComponent], [typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxDraggableComponent, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxDraggableModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,