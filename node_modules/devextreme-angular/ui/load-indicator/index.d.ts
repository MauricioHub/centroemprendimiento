/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxLoadIndicator from 'devextreme/ui/load_indicator';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/** The LoadIndicator is a UI element notifying the viewer that a process is in progress. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxLoadIndicatorComponent extends DxComponent implements OnDestroy {
    instance: DxLoadIndicator;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies the path to an image used as the indicator. */
    indicatorSrc: string;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    indicatorSrcChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLoadIndicator;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxLoadIndicatorComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxLoadIndicatorComponent, "dx-load-indicator", never, {
    "elementAttr": "elementAttr";
    "height": "height";
    "hint": "hint";
    "indicatorSrc": "indicatorSrc";
    "rtlEnabled": "rtlEnabled";
    "visible": "visible";
    "width": "width";
}, {
    "onContentReady": "onContentReady";
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "elementAttrChange": "elementAttrChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "indicatorSrcChange": "indicatorSrcChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
}, never>;
}
export declare class DxLoadIndicatorModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxLoadIndicatorModule, [typeof DxLoadIndicatorComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxLoadIndicatorComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxLoadIndicatorModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFpQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAyMC4xLjdcclxuICogQnVpbGQgZGF0ZTogVHVlIEF1ZyAyNSAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IER4TG9hZEluZGljYXRvciBmcm9tICdkZXZleHRyZW1lL3VpL2xvYWRfaW5kaWNhdG9yJztcclxuaW1wb3J0IHsgRHhDb21wb25lbnQsIER4VGVtcGxhdGVIb3N0LCBOZXN0ZWRPcHRpb25Ib3N0LCBXYXRjaGVySGVscGVyIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG4vKiogVGhlIExvYWRJbmRpY2F0b3IgaXMgYSBVSSBlbGVtZW50IG5vdGlmeWluZyB0aGUgdmlld2VyIHRoYXQgYSBwcm9jZXNzIGlzIGluIHByb2dyZXNzLiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeExvYWRJbmRpY2F0b3JDb21wb25lbnQgZXh0ZW5kcyBEeENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcbiAgICBpbnN0YW5jZTogRHhMb2FkSW5kaWNhdG9yO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgd2lkZ2V0J3Mgcm9vdCBlbGVtZW50LiAqL1xyXG4gICAgZWxlbWVudEF0dHI6IGFueTtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHdpZGdldCdzIGhlaWdodC4gKi9cclxuICAgIGhlaWdodDogbnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRleHQgZm9yIGEgaGludCB0aGF0IGFwcGVhcnMgd2hlbiBhIHVzZXIgcGF1c2VzIG9uIHRoZSB3aWRnZXQuICovXHJcbiAgICBoaW50OiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBwYXRoIHRvIGFuIGltYWdlIHVzZWQgYXMgdGhlIGluZGljYXRvci4gKi9cclxuICAgIGluZGljYXRvclNyYzogc3RyaW5nO1xyXG4gICAgLyoqIFN3aXRjaGVzIHRoZSB3aWRnZXQgdG8gYSByaWdodC10by1sZWZ0IHJlcHJlc2VudGF0aW9uLiAqL1xyXG4gICAgcnRsRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IGlzIHZpc2libGUuICovXHJcbiAgICB2aXNpYmxlOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgd2lkZ2V0J3Mgd2lkdGguICovXHJcbiAgICB3aWR0aDogbnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc7XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gdGhlIHdpZGdldCdzIGNvbnRlbnQgaXMgcmVhZHkgYW5kIGVhY2ggdGltZSB0aGUgY29udGVudCBpcyBjaGFuZ2VkLiAqL1xyXG4gICAgb25Db250ZW50UmVhZHk6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBiZWZvcmUgdGhlIHdpZGdldCBpcyBkaXNwb3NlZCBvZi4gKi9cclxuICAgIG9uRGlzcG9zaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHVzZWQgaW4gSmF2YVNjcmlwdCBmcmFtZXdvcmtzIHRvIHNhdmUgdGhlIHdpZGdldCBpbnN0YW5jZS4gKi9cclxuICAgIG9uSW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBhZnRlciBhIHdpZGdldCBvcHRpb24gaXMgY2hhbmdlZC4gKi9cclxuICAgIG9uT3B0aW9uQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGVsZW1lbnRBdHRyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaGVpZ2h0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBoaW50Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaW5kaWNhdG9yU3JjQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcnRsRW5hYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB2aXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHdpZHRoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIHRlbXBsYXRlSG9zdDogRHhUZW1wbGF0ZUhvc3QsIF93YXRjaGVySGVscGVyOiBXYXRjaGVySGVscGVyLCBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LCB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkOiBhbnkpO1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVJbnN0YW5jZShlbGVtZW50OiBhbnksIG9wdGlvbnM6IGFueSk6IER4TG9hZEluZGljYXRvcjtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHhMb2FkSW5kaWNhdG9yTW9kdWxlIHtcclxufVxyXG4iXX0=