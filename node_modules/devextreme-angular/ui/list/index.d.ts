/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxSortableOptions } from 'devextreme/ui/sortable';
import { dxTextBoxOptions } from 'devextreme/ui/text_box';
import DxList from 'devextreme/ui/list';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import { DxiMenuItemComponent } from 'devextreme-angular/ui/nested';
/** The List is a widget that represents a collection of items in a scrollable list. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxListComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxList;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether or not the widget changes its state when interacting with a user. */
    activeStateEnabled: boolean;
    /** Specifies whether or not an end user can delete list items. */
    allowItemDeleting: boolean;
    /** @deprecated Use the itemDragging option instead. */
    /** Specifies whether a user can reorder list items. Grouped items cannot be moved from one group to another. */
    allowItemReordering: boolean;
    /** A Boolean value specifying whether to enable or disable the bounce-back effect. */
    bounceEnabled: boolean;
    /** Specifies whether or not an end-user can collapse groups. */
    collapsibleGroups: boolean;
    /** Binds the widget to data. */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxListItem | any>;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the data field whose values should be displayed. Defaults to "text" when the data source contains objects. */
    displayExpr: Function | string;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** Specifies whether data items should be grouped. */
    grouped: boolean;
    /** Specifies a custom template for group captions. */
    groupTemplate: any;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies whether or not to show the loading panel when the DataSource bound to the widget is loading data. */
    indicateLoading: boolean;
    /** Specifies the way a user can delete items from the list. */
    itemDeleteMode: string;
    /** Configures item reordering using drag and drop gestures. */
    itemDragging: dxSortableOptions;
    /** The time period in milliseconds before the onItemHold event is raised. */
    itemHoldTimeout: number;
    /** An array of items displayed by the widget. */
    items: Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /** Specifies a custom template for items. */
    itemTemplate: any;
    /** Specifies the key property that provides key values to access data items. Each key value must be unique. */
    keyExpr: Function | string;
    /** Specifies the array of items for a context menu called for a list item. */
    menuItems: Array<any | {
        action?: Function;
        text?: string;
    }>;
    /** Specifies whether an item context menu is shown when a user holds or swipes an item. */
    menuMode: string;
    /** The text displayed on the button used to load the next page from the data source. */
    nextButtonText: string;
    /** The text or HTML markup displayed by the widget if the item collection is empty. */
    noDataText: string;
    /** Specifies the text shown in the pullDown panel, which is displayed when the list is scrolled to the bottom. */
    pageLoadingText: string;
    /** Specifies whether the next page is loaded when a user scrolls the widget to the bottom or when the "next" button is clicked. */
    pageLoadMode: string;
    /** Specifies the text displayed in the pullDown panel when the list is pulled below the refresh threshold. */
    pulledDownText: string;
    /** Specifies the text shown in the pullDown panel while the list is being pulled down to the refresh threshold. */
    pullingDownText: string;
    /** A Boolean value specifying whether or not the widget supports the "pull down to refresh" gesture. */
    pullRefreshEnabled: boolean;
    /** Specifies the text displayed in the pullDown panel while the list is being refreshed. */
    refreshingText: string;
    /** Specifies whether to repaint only those elements whose data changed. */
    repaintChangesOnly: boolean;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** A Boolean value specifying if the list is scrolled by content. */
    scrollByContent: boolean;
    /** A Boolean value specifying if the list is scrolled using the scrollbar. */
    scrollByThumb: boolean;
    /** A Boolean value specifying whether to enable or disable list scrolling. */
    scrollingEnabled: boolean;
    /** Configures the search panel. */
    searchEditorOptions: dxTextBoxOptions;
    /** Specifies whether the search panel is visible. */
    searchEnabled: boolean;
    /** Specifies a data object's field name or an expression whose value is compared to the search string. */
    searchExpr: Function | string | Array<Function | string>;
    /** Specifies a comparison operation used to search widget items. */
    searchMode: string;
    /** Specifies a delay in milliseconds between when a user finishes typing, and the search is executed. */
    searchTimeout: number;
    /** Specifies the current search string. */
    searchValue: string;
    /** Specifies the mode in which all items are selected. */
    selectAllMode: string;
    /** Specifies an array of currently selected item keys. */
    selectedItemKeys: Array<any>;
    /** An array of currently selected item objects. */
    selectedItems: Array<any>;
    /** Specifies item selection mode. */
    selectionMode: string;
    /** Specifies when the widget shows the scrollbar. */
    showScrollbar: string;
    /** Specifies whether or not to display controls used to select list items. */
    showSelectionControls: boolean;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** Specifies whether or not the widget uses native scrolling. */
    useNativeScrolling: boolean;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function that is executed when a group element is rendered. */
    onGroupRendered: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed when a collection item is clicked or tapped. */
    onItemClick: EventEmitter<any>;
    /** A function that is executed when a collection item is right-clicked or pressed. */
    onItemContextMenu: EventEmitter<any>;
    /** A function that is executed after a list item is deleted from the data source. */
    onItemDeleted: EventEmitter<any>;
    /** A function that is executed before a collection item is deleted from the data source. */
    onItemDeleting: EventEmitter<any>;
    /** A function that is executed when a collection item has been held for a specified period. */
    onItemHold: EventEmitter<any>;
    /** A function that is executed after a collection item is rendered. */
    onItemRendered: EventEmitter<any>;
    /** A function that is executed after a list item is moved to another position. */
    onItemReordered: EventEmitter<any>;
    /** A function that is executed when a list item is swiped. */
    onItemSwipe: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed before the next page is loaded. */
    onPageLoading: EventEmitter<any>;
    /** A function that is executed when the "pull to refresh" gesture is performed. Supported in mobile themes only. */
    onPullRefresh: EventEmitter<any>;
    /** A function that is executed on each scroll gesture. */
    onScroll: EventEmitter<any>;
    /** A function that is executed when the "Select All" check box value is changed. Applies only if the selectionMode is "all". */
    onSelectAllValueChanged: EventEmitter<any>;
    /** A function that is executed when a collection item is selected or selection is canceled. */
    onSelectionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    activeStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    allowItemDeletingChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    allowItemReorderingChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    bounceEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    collapsibleGroupsChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxListItem | any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    displayExprChange: EventEmitter<Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupedChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    indicateLoadingChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemDeleteModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemDraggingChange: EventEmitter<dxSortableOptions>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemHoldTimeoutChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemsChange: EventEmitter<Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    keyExprChange: EventEmitter<Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    menuItemsChange: EventEmitter<Array<any | {
        action?: Function;
        text?: string;
    }>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    menuModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    nextButtonTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    noDataTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pageLoadingTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pageLoadModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pulledDownTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pullingDownTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    refreshingTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollByContentChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollByThumbChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    scrollingEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchEditorOptionsChange: EventEmitter<dxTextBoxOptions>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchTimeoutChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchValueChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectAllModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectedItemsChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectionModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showScrollbarChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showSelectionControlsChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    useNativeScrollingChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    itemsChildren: QueryList<DxiItemComponent>;
    menuItemsChildren: QueryList<DxiMenuItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxList;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxListComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxListComponent, "dx-list", never, {
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "allowItemDeleting": "allowItemDeleting";
    "allowItemReordering": "allowItemReordering";
    "bounceEnabled": "bounceEnabled";
    "collapsibleGroups": "collapsibleGroups";
    "dataSource": "dataSource";
    "disabled": "disabled";
    "displayExpr": "displayExpr";
    "elementAttr": "elementAttr";
    "focusStateEnabled": "focusStateEnabled";
    "grouped": "grouped";
    "groupTemplate": "groupTemplate";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "indicateLoading": "indicateLoading";
    "itemDeleteMode": "itemDeleteMode";
    "itemDragging": "itemDragging";
    "itemHoldTimeout": "itemHoldTimeout";
    "items": "items";
    "itemTemplate": "itemTemplate";
    "keyExpr": "keyExpr";
    "menuItems": "menuItems";
    "menuMode": "menuMode";
    "nextButtonText": "nextButtonText";
    "noDataText": "noDataText";
    "pageLoadingText": "pageLoadingText";
    "pageLoadMode": "pageLoadMode";
    "pulledDownText": "pulledDownText";
    "pullingDownText": "pullingDownText";
    "pullRefreshEnabled": "pullRefreshEnabled";
    "refreshingText": "refreshingText";
    "repaintChangesOnly": "repaintChangesOnly";
    "rtlEnabled": "rtlEnabled";
    "scrollByContent": "scrollByContent";
    "scrollByThumb": "scrollByThumb";
    "scrollingEnabled": "scrollingEnabled";
    "searchEditorOptions": "searchEditorOptions";
    "searchEnabled": "searchEnabled";
    "searchExpr": "searchExpr";
    "searchMode": "searchMode";
    "searchTimeout": "searchTimeout";
    "searchValue": "searchValue";
    "selectAllMode": "selectAllMode";
    "selectedItemKeys": "selectedItemKeys";
    "selectedItems": "selectedItems";
    "selectionMode": "selectionMode";
    "showScrollbar": "showScrollbar";
    "showSelectionControls": "showSelectionControls";
    "tabIndex": "tabIndex";
    "useNativeScrolling": "useNativeScrolling";
    "visible": "visible";
    "width": "width";
}, {
    "onContentReady": "onContentReady";
    "onDisposing": "onDisposing";
    "onGroupRendered": "onGroupRendered";
    "onInitialized": "onInitialized";
    "onItemClick": "onItemClick";
    "onItemContextMenu": "onItemContextMenu";
    "onItemDeleted": "onItemDeleted";
    "onItemDeleting": "onItemDeleting";
    "onItemHold": "onItemHold";
    "onItemRendered": "onItemRendered";
    "onItemReordered": "onItemReordered";
    "onItemSwipe": "onItemSwipe";
    "onOptionChanged": "onOptionChanged";
    "onPageLoading": "onPageLoading";
    "onPullRefresh": "onPullRefresh";
    "onScroll": "onScroll";
    "onSelectAllValueChanged": "onSelectAllValueChanged";
    "onSelectionChanged": "onSelectionChanged";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "allowItemDeletingChange": "allowItemDeletingChange";
    "allowItemReorderingChange": "allowItemReorderingChange";
    "bounceEnabledChange": "bounceEnabledChange";
    "collapsibleGroupsChange": "collapsibleGroupsChange";
    "dataSourceChange": "dataSourceChange";
    "disabledChange": "disabledChange";
    "displayExprChange": "displayExprChange";
    "elementAttrChange": "elementAttrChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "groupedChange": "groupedChange";
    "groupTemplateChange": "groupTemplateChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "indicateLoadingChange": "indicateLoadingChange";
    "itemDeleteModeChange": "itemDeleteModeChange";
    "itemDraggingChange": "itemDraggingChange";
    "itemHoldTimeoutChange": "itemHoldTimeoutChange";
    "itemsChange": "itemsChange";
    "itemTemplateChange": "itemTemplateChange";
    "keyExprChange": "keyExprChange";
    "menuItemsChange": "menuItemsChange";
    "menuModeChange": "menuModeChange";
    "nextButtonTextChange": "nextButtonTextChange";
    "noDataTextChange": "noDataTextChange";
    "pageLoadingTextChange": "pageLoadingTextChange";
    "pageLoadModeChange": "pageLoadModeChange";
    "pulledDownTextChange": "pulledDownTextChange";
    "pullingDownTextChange": "pullingDownTextChange";
    "pullRefreshEnabledChange": "pullRefreshEnabledChange";
    "refreshingTextChange": "refreshingTextChange";
    "repaintChangesOnlyChange": "repaintChangesOnlyChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "scrollByContentChange": "scrollByContentChange";
    "scrollByThumbChange": "scrollByThumbChange";
    "scrollingEnabledChange": "scrollingEnabledChange";
    "searchEditorOptionsChange": "searchEditorOptionsChange";
    "searchEnabledChange": "searchEnabledChange";
    "searchExprChange": "searchExprChange";
    "searchModeChange": "searchModeChange";
    "searchTimeoutChange": "searchTimeoutChange";
    "searchValueChange": "searchValueChange";
    "selectAllModeChange": "selectAllModeChange";
    "selectedItemKeysChange": "selectedItemKeysChange";
    "selectedItemsChange": "selectedItemsChange";
    "selectionModeChange": "selectionModeChange";
    "showScrollbarChange": "showScrollbarChange";
    "showSelectionControlsChange": "showSelectionControlsChange";
    "tabIndexChange": "tabIndexChange";
    "useNativeScrollingChange": "useNativeScrollingChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
}, ["itemsChildren", "menuItemsChildren"]>;
}
export declare class DxListModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxListModule, [typeof DxListComponent], [typeof ɵngcc1.DxoItemDraggingModule, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxiMenuItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxListComponent, typeof ɵngcc1.DxoItemDraggingModule, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxiMenuItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxListModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFzQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb1NBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDIwLjEuN1xyXG4gKiBCdWlsZCBkYXRlOiBUdWUgQXVnIDI1IDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCB7IFRyYW5zZmVyU3RhdGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgRWxlbWVudFJlZiwgTmdab25lLCBPbkRlc3Ryb3ksIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLCBEb0NoZWNrLCBTaW1wbGVDaGFuZ2VzLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IERldkV4cHJlc3MgZnJvbSAnZGV2ZXh0cmVtZS9idW5kbGVzL2R4LmFsbCc7XHJcbmltcG9ydCB7IGR4U29ydGFibGVPcHRpb25zIH0gZnJvbSAnZGV2ZXh0cmVtZS91aS9zb3J0YWJsZSc7XHJcbmltcG9ydCB7IGR4VGV4dEJveE9wdGlvbnMgfSBmcm9tICdkZXZleHRyZW1lL3VpL3RleHRfYm94JztcclxuaW1wb3J0IER4TGlzdCBmcm9tICdkZXZleHRyZW1lL3VpL2xpc3QnO1xyXG5pbXBvcnQgeyBEeENvbXBvbmVudCwgRHhUZW1wbGF0ZUhvc3QsIE5lc3RlZE9wdGlvbkhvc3QsIEl0ZXJhYmxlRGlmZmVySGVscGVyLCBXYXRjaGVySGVscGVyIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlJdGVtQ29tcG9uZW50IH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbmltcG9ydCB7IER4aU1lbnVJdGVtQ29tcG9uZW50IH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbi8qKiBUaGUgTGlzdCBpcyBhIHdpZGdldCB0aGF0IHJlcHJlc2VudHMgYSBjb2xsZWN0aW9uIG9mIGl0ZW1zIGluIGEgc2Nyb2xsYWJsZSBsaXN0LiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeExpc3RDb21wb25lbnQgZXh0ZW5kcyBEeENvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBEb0NoZWNrIHtcclxuICAgIHByaXZhdGUgX3dhdGNoZXJIZWxwZXI7XHJcbiAgICBwcml2YXRlIF9pZGg7XHJcbiAgICBpbnN0YW5jZTogRHhMaXN0O1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgc2hvcnRjdXQga2V5IHRoYXQgc2V0cyBmb2N1cyBvbiB0aGUgd2lkZ2V0LiAqL1xyXG4gICAgYWNjZXNzS2V5OiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IHRoZSB3aWRnZXQgY2hhbmdlcyBpdHMgc3RhdGUgd2hlbiBpbnRlcmFjdGluZyB3aXRoIGEgdXNlci4gKi9cclxuICAgIGFjdGl2ZVN0YXRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgYW4gZW5kIHVzZXIgY2FuIGRlbGV0ZSBsaXN0IGl0ZW1zLiAqL1xyXG4gICAgYWxsb3dJdGVtRGVsZXRpbmc6IGJvb2xlYW47XHJcbiAgICAvKiogQGRlcHJlY2F0ZWQgVXNlIHRoZSBpdGVtRHJhZ2dpbmcgb3B0aW9uIGluc3RlYWQuICovXHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgYSB1c2VyIGNhbiByZW9yZGVyIGxpc3QgaXRlbXMuIEdyb3VwZWQgaXRlbXMgY2Fubm90IGJlIG1vdmVkIGZyb20gb25lIGdyb3VwIHRvIGFub3RoZXIuICovXHJcbiAgICBhbGxvd0l0ZW1SZW9yZGVyaW5nOiBib29sZWFuO1xyXG4gICAgLyoqIEEgQm9vbGVhbiB2YWx1ZSBzcGVjaWZ5aW5nIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvdW5jZS1iYWNrIGVmZmVjdC4gKi9cclxuICAgIGJvdW5jZUVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgb3Igbm90IGFuIGVuZC11c2VyIGNhbiBjb2xsYXBzZSBncm91cHMuICovXHJcbiAgICBjb2xsYXBzaWJsZUdyb3VwczogYm9vbGVhbjtcclxuICAgIC8qKiBCaW5kcyB0aGUgd2lkZ2V0IHRvIGRhdGEuICovXHJcbiAgICBkYXRhU291cmNlOiBEZXZFeHByZXNzLmRhdGEuRGF0YVNvdXJjZSB8IERldkV4cHJlc3MuZGF0YS5EYXRhU291cmNlT3B0aW9ucyB8IHN0cmluZyB8IEFycmF5PHN0cmluZyB8IERldkV4cHJlc3MudWkuZHhMaXN0SXRlbSB8IGFueT47XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHdpZGdldCByZXNwb25kcyB0byB1c2VyIGludGVyYWN0aW9uLiAqL1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBkYXRhIGZpZWxkIHdob3NlIHZhbHVlcyBzaG91bGQgYmUgZGlzcGxheWVkLiBEZWZhdWx0cyB0byBcInRleHRcIiB3aGVuIHRoZSBkYXRhIHNvdXJjZSBjb250YWlucyBvYmplY3RzLiAqL1xyXG4gICAgZGlzcGxheUV4cHI6IEZ1bmN0aW9uIHwgc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgd2lkZ2V0J3Mgcm9vdCBlbGVtZW50LiAqL1xyXG4gICAgZWxlbWVudEF0dHI6IGFueTtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IGNhbiBiZSBmb2N1c2VkIHVzaW5nIGtleWJvYXJkIG5hdmlnYXRpb24uICovXHJcbiAgICBmb2N1c1N0YXRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciBkYXRhIGl0ZW1zIHNob3VsZCBiZSBncm91cGVkLiAqL1xyXG4gICAgZ3JvdXBlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBjdXN0b20gdGVtcGxhdGUgZm9yIGdyb3VwIGNhcHRpb25zLiAqL1xyXG4gICAgZ3JvdXBUZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgd2lkZ2V0J3MgaGVpZ2h0LiAqL1xyXG4gICAgaGVpZ2h0OiBudW1iZXIgfCBGdW5jdGlvbiB8IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGV4dCBmb3IgYSBoaW50IHRoYXQgYXBwZWFycyB3aGVuIGEgdXNlciBwYXVzZXMgb24gdGhlIHdpZGdldC4gKi9cclxuICAgIGhpbnQ6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IGNoYW5nZXMgaXRzIHN0YXRlIHdoZW4gYSB1c2VyIHBhdXNlcyBvbiBpdC4gKi9cclxuICAgIGhvdmVyU3RhdGVFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBzaG93IHRoZSBsb2FkaW5nIHBhbmVsIHdoZW4gdGhlIERhdGFTb3VyY2UgYm91bmQgdG8gdGhlIHdpZGdldCBpcyBsb2FkaW5nIGRhdGEuICovXHJcbiAgICBpbmRpY2F0ZUxvYWRpbmc6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB3YXkgYSB1c2VyIGNhbiBkZWxldGUgaXRlbXMgZnJvbSB0aGUgbGlzdC4gKi9cclxuICAgIGl0ZW1EZWxldGVNb2RlOiBzdHJpbmc7XHJcbiAgICAvKiogQ29uZmlndXJlcyBpdGVtIHJlb3JkZXJpbmcgdXNpbmcgZHJhZyBhbmQgZHJvcCBnZXN0dXJlcy4gKi9cclxuICAgIGl0ZW1EcmFnZ2luZzogZHhTb3J0YWJsZU9wdGlvbnM7XHJcbiAgICAvKiogVGhlIHRpbWUgcGVyaW9kIGluIG1pbGxpc2Vjb25kcyBiZWZvcmUgdGhlIG9uSXRlbUhvbGQgZXZlbnQgaXMgcmFpc2VkLiAqL1xyXG4gICAgaXRlbUhvbGRUaW1lb3V0OiBudW1iZXI7XHJcbiAgICAvKiogQW4gYXJyYXkgb2YgaXRlbXMgZGlzcGxheWVkIGJ5IHRoZSB3aWRnZXQuICovXHJcbiAgICBpdGVtczogQXJyYXk8c3RyaW5nIHwgYW55IHwge1xyXG4gICAgICAgIGJhZGdlPzogc3RyaW5nO1xyXG4gICAgICAgIGRpc2FibGVkPzogYm9vbGVhbjtcclxuICAgICAgICBodG1sPzogc3RyaW5nO1xyXG4gICAgICAgIGljb24/OiBzdHJpbmc7XHJcbiAgICAgICAga2V5Pzogc3RyaW5nO1xyXG4gICAgICAgIHNob3dDaGV2cm9uPzogYm9vbGVhbjtcclxuICAgICAgICB0ZW1wbGF0ZT86IGFueTtcclxuICAgICAgICB0ZXh0Pzogc3RyaW5nO1xyXG4gICAgICAgIHZpc2libGU/OiBib29sZWFuO1xyXG4gICAgfT47XHJcbiAgICAvKiogU3BlY2lmaWVzIGEgY3VzdG9tIHRlbXBsYXRlIGZvciBpdGVtcy4gKi9cclxuICAgIGl0ZW1UZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUga2V5IHByb3BlcnR5IHRoYXQgcHJvdmlkZXMga2V5IHZhbHVlcyB0byBhY2Nlc3MgZGF0YSBpdGVtcy4gRWFjaCBrZXkgdmFsdWUgbXVzdCBiZSB1bmlxdWUuICovXHJcbiAgICBrZXlFeHByOiBGdW5jdGlvbiB8IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGFycmF5IG9mIGl0ZW1zIGZvciBhIGNvbnRleHQgbWVudSBjYWxsZWQgZm9yIGEgbGlzdCBpdGVtLiAqL1xyXG4gICAgbWVudUl0ZW1zOiBBcnJheTxhbnkgfCB7XHJcbiAgICAgICAgYWN0aW9uPzogRnVuY3Rpb247XHJcbiAgICAgICAgdGV4dD86IHN0cmluZztcclxuICAgIH0+O1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIGFuIGl0ZW0gY29udGV4dCBtZW51IGlzIHNob3duIHdoZW4gYSB1c2VyIGhvbGRzIG9yIHN3aXBlcyBhbiBpdGVtLiAqL1xyXG4gICAgbWVudU1vZGU6IHN0cmluZztcclxuICAgIC8qKiBUaGUgdGV4dCBkaXNwbGF5ZWQgb24gdGhlIGJ1dHRvbiB1c2VkIHRvIGxvYWQgdGhlIG5leHQgcGFnZSBmcm9tIHRoZSBkYXRhIHNvdXJjZS4gKi9cclxuICAgIG5leHRCdXR0b25UZXh0OiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIHRleHQgb3IgSFRNTCBtYXJrdXAgZGlzcGxheWVkIGJ5IHRoZSB3aWRnZXQgaWYgdGhlIGl0ZW0gY29sbGVjdGlvbiBpcyBlbXB0eS4gKi9cclxuICAgIG5vRGF0YVRleHQ6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgc2hvd24gaW4gdGhlIHB1bGxEb3duIHBhbmVsLCB3aGljaCBpcyBkaXNwbGF5ZWQgd2hlbiB0aGUgbGlzdCBpcyBzY3JvbGxlZCB0byB0aGUgYm90dG9tLiAqL1xyXG4gICAgcGFnZUxvYWRpbmdUZXh0OiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIG5leHQgcGFnZSBpcyBsb2FkZWQgd2hlbiBhIHVzZXIgc2Nyb2xscyB0aGUgd2lkZ2V0IHRvIHRoZSBib3R0b20gb3Igd2hlbiB0aGUgXCJuZXh0XCIgYnV0dG9uIGlzIGNsaWNrZWQuICovXHJcbiAgICBwYWdlTG9hZE1vZGU6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHRleHQgZGlzcGxheWVkIGluIHRoZSBwdWxsRG93biBwYW5lbCB3aGVuIHRoZSBsaXN0IGlzIHB1bGxlZCBiZWxvdyB0aGUgcmVmcmVzaCB0aHJlc2hvbGQuICovXHJcbiAgICBwdWxsZWREb3duVGV4dDogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgdGV4dCBzaG93biBpbiB0aGUgcHVsbERvd24gcGFuZWwgd2hpbGUgdGhlIGxpc3QgaXMgYmVpbmcgcHVsbGVkIGRvd24gdG8gdGhlIHJlZnJlc2ggdGhyZXNob2xkLiAqL1xyXG4gICAgcHVsbGluZ0Rvd25UZXh0OiBzdHJpbmc7XHJcbiAgICAvKiogQSBCb29sZWFuIHZhbHVlIHNwZWNpZnlpbmcgd2hldGhlciBvciBub3QgdGhlIHdpZGdldCBzdXBwb3J0cyB0aGUgXCJwdWxsIGRvd24gdG8gcmVmcmVzaFwiIGdlc3R1cmUuICovXHJcbiAgICBwdWxsUmVmcmVzaEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB0ZXh0IGRpc3BsYXllZCBpbiB0aGUgcHVsbERvd24gcGFuZWwgd2hpbGUgdGhlIGxpc3QgaXMgYmVpbmcgcmVmcmVzaGVkLiAqL1xyXG4gICAgcmVmcmVzaGluZ1RleHQ6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0byByZXBhaW50IG9ubHkgdGhvc2UgZWxlbWVudHMgd2hvc2UgZGF0YSBjaGFuZ2VkLiAqL1xyXG4gICAgcmVwYWludENoYW5nZXNPbmx5OiBib29sZWFuO1xyXG4gICAgLyoqIFN3aXRjaGVzIHRoZSB3aWRnZXQgdG8gYSByaWdodC10by1sZWZ0IHJlcHJlc2VudGF0aW9uLiAqL1xyXG4gICAgcnRsRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBBIEJvb2xlYW4gdmFsdWUgc3BlY2lmeWluZyBpZiB0aGUgbGlzdCBpcyBzY3JvbGxlZCBieSBjb250ZW50LiAqL1xyXG4gICAgc2Nyb2xsQnlDb250ZW50OiBib29sZWFuO1xyXG4gICAgLyoqIEEgQm9vbGVhbiB2YWx1ZSBzcGVjaWZ5aW5nIGlmIHRoZSBsaXN0IGlzIHNjcm9sbGVkIHVzaW5nIHRoZSBzY3JvbGxiYXIuICovXHJcbiAgICBzY3JvbGxCeVRodW1iOiBib29sZWFuO1xyXG4gICAgLyoqIEEgQm9vbGVhbiB2YWx1ZSBzcGVjaWZ5aW5nIHdoZXRoZXIgdG8gZW5hYmxlIG9yIGRpc2FibGUgbGlzdCBzY3JvbGxpbmcuICovXHJcbiAgICBzY3JvbGxpbmdFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIENvbmZpZ3VyZXMgdGhlIHNlYXJjaCBwYW5lbC4gKi9cclxuICAgIHNlYXJjaEVkaXRvck9wdGlvbnM6IGR4VGV4dEJveE9wdGlvbnM7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHNlYXJjaCBwYW5lbCBpcyB2aXNpYmxlLiAqL1xyXG4gICAgc2VhcmNoRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBkYXRhIG9iamVjdCdzIGZpZWxkIG5hbWUgb3IgYW4gZXhwcmVzc2lvbiB3aG9zZSB2YWx1ZSBpcyBjb21wYXJlZCB0byB0aGUgc2VhcmNoIHN0cmluZy4gKi9cclxuICAgIHNlYXJjaEV4cHI6IEZ1bmN0aW9uIHwgc3RyaW5nIHwgQXJyYXk8RnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgLyoqIFNwZWNpZmllcyBhIGNvbXBhcmlzb24gb3BlcmF0aW9uIHVzZWQgdG8gc2VhcmNoIHdpZGdldCBpdGVtcy4gKi9cclxuICAgIHNlYXJjaE1vZGU6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBkZWxheSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB3aGVuIGEgdXNlciBmaW5pc2hlcyB0eXBpbmcsIGFuZCB0aGUgc2VhcmNoIGlzIGV4ZWN1dGVkLiAqL1xyXG4gICAgc2VhcmNoVGltZW91dDogbnVtYmVyO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgY3VycmVudCBzZWFyY2ggc3RyaW5nLiAqL1xyXG4gICAgc2VhcmNoVmFsdWU6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG1vZGUgaW4gd2hpY2ggYWxsIGl0ZW1zIGFyZSBzZWxlY3RlZC4gKi9cclxuICAgIHNlbGVjdEFsbE1vZGU6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgYW4gYXJyYXkgb2YgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW0ga2V5cy4gKi9cclxuICAgIHNlbGVjdGVkSXRlbUtleXM6IEFycmF5PGFueT47XHJcbiAgICAvKiogQW4gYXJyYXkgb2YgY3VycmVudGx5IHNlbGVjdGVkIGl0ZW0gb2JqZWN0cy4gKi9cclxuICAgIHNlbGVjdGVkSXRlbXM6IEFycmF5PGFueT47XHJcbiAgICAvKiogU3BlY2lmaWVzIGl0ZW0gc2VsZWN0aW9uIG1vZGUuICovXHJcbiAgICBzZWxlY3Rpb25Nb2RlOiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZW4gdGhlIHdpZGdldCBzaG93cyB0aGUgc2Nyb2xsYmFyLiAqL1xyXG4gICAgc2hvd1Njcm9sbGJhcjogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0byBkaXNwbGF5IGNvbnRyb2xzIHVzZWQgdG8gc2VsZWN0IGxpc3QgaXRlbXMuICovXHJcbiAgICBzaG93U2VsZWN0aW9uQ29udHJvbHM6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBudW1iZXIgb2YgdGhlIGVsZW1lbnQgd2hlbiB0aGUgVGFiIGtleSBpcyB1c2VkIGZvciBuYXZpZ2F0aW5nLiAqL1xyXG4gICAgdGFiSW5kZXg6IG51bWJlcjtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgdGhlIHdpZGdldCB1c2VzIG5hdGl2ZSBzY3JvbGxpbmcuICovXHJcbiAgICB1c2VOYXRpdmVTY3JvbGxpbmc6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHdpZGdldCBpcyB2aXNpYmxlLiAqL1xyXG4gICAgdmlzaWJsZTogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHdpZGdldCdzIHdpZHRoLiAqL1xyXG4gICAgd2lkdGg6IG51bWJlciB8IEZ1bmN0aW9uIHwgc3RyaW5nO1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIHRoZSB3aWRnZXQncyBjb250ZW50IGlzIHJlYWR5IGFuZCBlYWNoIHRpbWUgdGhlIGNvbnRlbnQgaXMgY2hhbmdlZC4gKi9cclxuICAgIG9uQ29udGVudFJlYWR5OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIHRoZSB3aWRnZXQgaXMgZGlzcG9zZWQgb2YuICovXHJcbiAgICBvbkRpc3Bvc2luZzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gYSBncm91cCBlbGVtZW50IGlzIHJlbmRlcmVkLiAqL1xyXG4gICAgb25Hcm91cFJlbmRlcmVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHVzZWQgaW4gSmF2YVNjcmlwdCBmcmFtZXdvcmtzIHRvIHNhdmUgdGhlIHdpZGdldCBpbnN0YW5jZS4gKi9cclxuICAgIG9uSW5pdGlhbGl6ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGEgY29sbGVjdGlvbiBpdGVtIGlzIGNsaWNrZWQgb3IgdGFwcGVkLiAqL1xyXG4gICAgb25JdGVtQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGEgY29sbGVjdGlvbiBpdGVtIGlzIHJpZ2h0LWNsaWNrZWQgb3IgcHJlc3NlZC4gKi9cclxuICAgIG9uSXRlbUNvbnRleHRNZW51OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgYSBsaXN0IGl0ZW0gaXMgZGVsZXRlZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS4gKi9cclxuICAgIG9uSXRlbURlbGV0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBiZWZvcmUgYSBjb2xsZWN0aW9uIGl0ZW0gaXMgZGVsZXRlZCBmcm9tIHRoZSBkYXRhIHNvdXJjZS4gKi9cclxuICAgIG9uSXRlbURlbGV0aW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiBhIGNvbGxlY3Rpb24gaXRlbSBoYXMgYmVlbiBoZWxkIGZvciBhIHNwZWNpZmllZCBwZXJpb2QuICovXHJcbiAgICBvbkl0ZW1Ib2xkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgYSBjb2xsZWN0aW9uIGl0ZW0gaXMgcmVuZGVyZWQuICovXHJcbiAgICBvbkl0ZW1SZW5kZXJlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGEgbGlzdCBpdGVtIGlzIG1vdmVkIHRvIGFub3RoZXIgcG9zaXRpb24uICovXHJcbiAgICBvbkl0ZW1SZW9yZGVyZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGEgbGlzdCBpdGVtIGlzIHN3aXBlZC4gKi9cclxuICAgIG9uSXRlbVN3aXBlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgYSB3aWRnZXQgb3B0aW9uIGlzIGNoYW5nZWQuICovXHJcbiAgICBvbk9wdGlvbkNoYW5nZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBiZWZvcmUgdGhlIG5leHQgcGFnZSBpcyBsb2FkZWQuICovXHJcbiAgICBvblBhZ2VMb2FkaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB0aGUgXCJwdWxsIHRvIHJlZnJlc2hcIiBnZXN0dXJlIGlzIHBlcmZvcm1lZC4gU3VwcG9ydGVkIGluIG1vYmlsZSB0aGVtZXMgb25seS4gKi9cclxuICAgIG9uUHVsbFJlZnJlc2g6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBvbiBlYWNoIHNjcm9sbCBnZXN0dXJlLiAqL1xyXG4gICAgb25TY3JvbGw6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIHRoZSBcIlNlbGVjdCBBbGxcIiBjaGVjayBib3ggdmFsdWUgaXMgY2hhbmdlZC4gQXBwbGllcyBvbmx5IGlmIHRoZSBzZWxlY3Rpb25Nb2RlIGlzIFwiYWxsXCIuICovXHJcbiAgICBvblNlbGVjdEFsbFZhbHVlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gYSBjb2xsZWN0aW9uIGl0ZW0gaXMgc2VsZWN0ZWQgb3Igc2VsZWN0aW9uIGlzIGNhbmNlbGVkLiAqL1xyXG4gICAgb25TZWxlY3Rpb25DaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWNjZXNzS2V5Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWN0aXZlU3RhdGVFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFsbG93SXRlbURlbGV0aW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFsbG93SXRlbVJlb3JkZXJpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYm91bmNlRW5hYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBjb2xsYXBzaWJsZUdyb3Vwc0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBkYXRhU291cmNlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGV2RXhwcmVzcy5kYXRhLkRhdGFTb3VyY2UgfCBEZXZFeHByZXNzLmRhdGEuRGF0YVNvdXJjZU9wdGlvbnMgfCBzdHJpbmcgfCBBcnJheTxzdHJpbmcgfCBEZXZFeHByZXNzLnVpLmR4TGlzdEl0ZW0gfCBhbnk+PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZGlzYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZGlzcGxheUV4cHJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxGdW5jdGlvbiB8IHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGVsZW1lbnRBdHRyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZm9jdXNTdGF0ZUVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZ3JvdXBlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBncm91cFRlbXBsYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaGVpZ2h0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBoaW50Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaG92ZXJTdGF0ZUVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaW5kaWNhdGVMb2FkaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGl0ZW1EZWxldGVNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaXRlbURyYWdnaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8ZHhTb3J0YWJsZU9wdGlvbnM+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBpdGVtSG9sZFRpbWVvdXRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBpdGVtc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PHN0cmluZyB8IGFueSB8IHtcclxuICAgICAgICBiYWRnZT86IHN0cmluZztcclxuICAgICAgICBkaXNhYmxlZD86IGJvb2xlYW47XHJcbiAgICAgICAgaHRtbD86IHN0cmluZztcclxuICAgICAgICBpY29uPzogc3RyaW5nO1xyXG4gICAgICAgIGtleT86IHN0cmluZztcclxuICAgICAgICBzaG93Q2hldnJvbj86IGJvb2xlYW47XHJcbiAgICAgICAgdGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgdGV4dD86IHN0cmluZztcclxuICAgICAgICB2aXNpYmxlPzogYm9vbGVhbjtcclxuICAgIH0+PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaXRlbVRlbXBsYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAga2V5RXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPEZ1bmN0aW9uIHwgc3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgbWVudUl0ZW1zQ2hhbmdlOiBFdmVudEVtaXR0ZXI8QXJyYXk8YW55IHwge1xyXG4gICAgICAgIGFjdGlvbj86IEZ1bmN0aW9uO1xyXG4gICAgICAgIHRleHQ/OiBzdHJpbmc7XHJcbiAgICB9Pj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIG1lbnVNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgbmV4dEJ1dHRvblRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBub0RhdGFUZXh0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcGFnZUxvYWRpbmdUZXh0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcGFnZUxvYWRNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcHVsbGVkRG93blRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBwdWxsaW5nRG93blRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBwdWxsUmVmcmVzaEVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcmVmcmVzaGluZ1RleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICByZXBhaW50Q2hhbmdlc09ubHlDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgcnRsRW5hYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzY3JvbGxCeUNvbnRlbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2Nyb2xsQnlUaHVtYkNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzY3JvbGxpbmdFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHNlYXJjaEVkaXRvck9wdGlvbnNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxkeFRleHRCb3hPcHRpb25zPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VhcmNoRW5hYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzZWFyY2hFeHByQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RnVuY3Rpb24gfCBzdHJpbmcgfCBBcnJheTxGdW5jdGlvbiB8IHN0cmluZz4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzZWFyY2hNb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VhcmNoVGltZW91dENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHNlYXJjaFZhbHVlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VsZWN0QWxsTW9kZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHNlbGVjdGVkSXRlbUtleXNDaGFuZ2U6IEV2ZW50RW1pdHRlcjxBcnJheTxhbnk+PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VsZWN0ZWRJdGVtc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzZWxlY3Rpb25Nb2RlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2hvd1Njcm9sbGJhckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHNob3dTZWxlY3Rpb25Db250cm9sc0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB0YWJJbmRleENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHVzZU5hdGl2ZVNjcm9sbGluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB2aXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHdpZHRoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgaXRlbXNDaGlsZHJlbjogUXVlcnlMaXN0PER4aUl0ZW1Db21wb25lbnQ+O1xyXG4gICAgbWVudUl0ZW1zQ2hpbGRyZW46IFF1ZXJ5TGlzdDxEeGlNZW51SXRlbUNvbXBvbmVudD47XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgdGVtcGxhdGVIb3N0OiBEeFRlbXBsYXRlSG9zdCwgX3dhdGNoZXJIZWxwZXI6IFdhdGNoZXJIZWxwZXIsIF9pZGg6IEl0ZXJhYmxlRGlmZmVySGVscGVyLCBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LCB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkOiBhbnkpO1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVJbnN0YW5jZShlbGVtZW50OiBhbnksIG9wdGlvbnM6IGFueSk6IER4TGlzdDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIHNldHVwQ2hhbmdlcyhwcm9wOiBzdHJpbmcsIGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBfc2V0T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQ7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHhMaXN0TW9kdWxlIHtcclxufVxyXG4iXX0=