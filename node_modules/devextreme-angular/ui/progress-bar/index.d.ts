/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxProgressBar from 'devextreme/ui/progress_bar';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/** The ProgressBar is a widget that shows current progress. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxProgressBarComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxProgressBar;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies or indicates whether the editor's value is valid. */
    isValid: boolean;
    /** The maximum value the widget can accept. */
    max: number;
    /** The minimum value the widget can accept. */
    min: number;
    /** Specifies whether the editor is read-only. */
    readOnly: boolean;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies whether or not the widget displays a progress status. */
    showStatus: boolean;
    /** Specifies a format for the progress status. */
    statusFormat: Function | string;
    /** Information on the broken validation rule. Contains the first item from the validationErrors array. */
    validationError: any;
    /** An array of the validation rules that failed. */
    validationErrors: Array<any>;
    /** Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed. */
    validationMessageMode: string;
    /** Indicates or specifies the current validation status. */
    validationStatus: string;
    /** The current widget value. */
    value: number;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed when the value reaches the maximum. */
    onComplete: EventEmitter<any>;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed after the widget's value is changed. */
    onValueChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    isValidChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    minChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    readOnlyChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showStatusChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    statusFormatChange: EventEmitter<Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorsChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationMessageModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationStatusChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxProgressBar;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxProgressBarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxProgressBarComponent, "dx-progress-bar", never, {
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "isValid": "isValid";
    "max": "max";
    "min": "min";
    "readOnly": "readOnly";
    "rtlEnabled": "rtlEnabled";
    "showStatus": "showStatus";
    "statusFormat": "statusFormat";
    "validationError": "validationError";
    "validationErrors": "validationErrors";
    "validationMessageMode": "validationMessageMode";
    "validationStatus": "validationStatus";
    "value": "value";
    "visible": "visible";
    "width": "width";
}, {
    "onComplete": "onComplete";
    "onContentReady": "onContentReady";
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "onValueChanged": "onValueChanged";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "isValidChange": "isValidChange";
    "maxChange": "maxChange";
    "minChange": "minChange";
    "readOnlyChange": "readOnlyChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "showStatusChange": "showStatusChange";
    "statusFormatChange": "statusFormatChange";
    "validationErrorChange": "validationErrorChange";
    "validationErrorsChange": "validationErrorsChange";
    "validationMessageModeChange": "validationMessageModeChange";
    "validationStatusChange": "validationStatusChange";
    "valueChange": "valueChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
    "onBlur": "onBlur";
}, never>;
}
export declare class DxProgressBarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxProgressBarModule, [typeof DxProgressBarComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxProgressBarComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxProgressBarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,