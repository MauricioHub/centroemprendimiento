/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxPopupOptions } from 'devextreme/ui/popup';
import DxSelectBox from 'devextreme/ui/select_box';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiButtonComponent } from 'devextreme-angular/ui/nested';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/** The SelectBox widget is an editor that allows an end user to select an item from a drop-down list. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxSelectBoxComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxSelectBox;
    /** Specifies whether the widget allows a user to enter a custom value. Requires the onCustomItemCreating handler implementation. */
    acceptCustomValue: boolean;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether or not the widget changes its state when interacting with a user. */
    activeStateEnabled: boolean;
    /** Allows you to add custom buttons to the input text field. */
    buttons: Array<string | DevExpress.ui.dxTextEditorButton>;
    /** Binds the widget to data. */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.CollectionWidgetItem | any>;
    /** Specifies whether to render the drop-down field's content when it is displayed. If false, the content is rendered immediately. */
    deferRendering: boolean;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the data field whose values should be displayed. */
    displayExpr: Function | string;
    /** Returns the value currently displayed by the widget. */
    displayValue: string;
    /** Specifies a custom template for the drop-down button. */
    dropDownButtonTemplate: any;
    /** Configures the drop-down field which holds the content. */
    dropDownOptions: dxPopupOptions;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies a custom template for the text field. Must contain the TextBox widget. */
    fieldTemplate: any;
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** Specifies whether data items should be grouped. */
    grouped: boolean;
    /** Specifies a custom template for group captions. */
    groupTemplate: any;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies the attributes to be passed on to the underlying HTML element. */
    inputAttr: any;
    /** Specifies or indicates whether the editor's value is valid. */
    isValid: boolean;
    /** An array of items displayed by the widget. */
    items: Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /** Specifies a custom template for items. */
    itemTemplate: any;
    /** Specifies the maximum number of characters you can enter into the textbox. */
    maxLength: number | string;
    /** The minimum number of characters that must be entered into the text box to begin a search. Applies only if searchEnabled is true. */
    minSearchLength: number;
    /** The value to be assigned to the `name` attribute of the underlying HTML element. */
    name: string;
    /** The text or HTML markup displayed by the widget if the item collection is empty. */
    noDataText: string;
    /** Specifies whether or not the drop-down editor is displayed. */
    opened: boolean;
    /** Specifies whether a user can open the drop-down list by clicking a text field. */
    openOnFieldClick: boolean;
    /** The text that is provided as a hint in the select box editor. */
    placeholder: string;
    /** Specifies whether the editor is read-only. */
    readOnly: boolean;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies whether to allow searching. */
    searchEnabled: boolean;
    /** Specifies the name of a data source item field or an expression whose value is compared to the search criterion. */
    searchExpr: Function | string | Array<Function | string>;
    /** Specifies a comparison operation used to search widget items. */
    searchMode: string;
    /** Specifies the time delay, in milliseconds, after the last character has been typed in, before a search is executed. */
    searchTimeout: number;
    /** Gets the currently selected item. */
    selectedItem: any;
    /** Specifies whether to display the Clear button in the widget. */
    showClearButton: boolean;
    /** Specifies whether or not the widget displays unfiltered values until a user types a number of characters exceeding the minSearchLength option value. */
    showDataBeforeSearch: boolean;
    /** Specifies whether the drop-down button is visible. */
    showDropDownButton: boolean;
    /** Specifies whether or not to display selection controls. */
    showSelectionControls: boolean;
    /** Specifies whether or not the widget checks the inner text for spelling mistakes. */
    spellcheck: boolean;
    /** Specifies how the widget's text field is styled. */
    stylingMode: string;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** The read-only option that holds the text displayed by the widget input element. */
    text: string;
    /** Information on the broken validation rule. Contains the first item from the validationErrors array. */
    validationError: any;
    /** An array of the validation rules that failed. */
    validationErrors: Array<any>;
    /** Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed. */
    validationMessageMode: string;
    /** Indicates or specifies the current validation status. */
    validationStatus: string;
    /** Specifies the currently selected value. May be an object if dataSource contains objects and valueExpr is not set. */
    value: any;
    /** Specifies the DOM events after which the widget's value should be updated. Applies only if acceptCustomValue is set to true. */
    valueChangeEvent: string;
    /** Specifies which data field provides unique values to the widget's value. */
    valueExpr: Function | string;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** Specifies whether text that exceeds the drop-down list width should be wrapped. */
    wrapItemText: boolean;
    /** A function that is executed when the widget loses focus after the text field's content was changed using the keyboard. */
    onChange: EventEmitter<any>;
    /** A function that is executed once the drop-down editor is closed. */
    onClosed: EventEmitter<any>;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed when the widget's input has been copied. */
    onCopy: EventEmitter<any>;
    /** A function that is executed when a user adds a custom item. Requires acceptCustomValue to be set to true. */
    onCustomItemCreating: EventEmitter<any>;
    /** A function that is executed when the widget's input has been cut. */
    onCut: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function that is executed when the Enter key has been pressed while the widget is focused. */
    onEnterKey: EventEmitter<any>;
    /** A function that is executed when the widget gets focus. */
    onFocusIn: EventEmitter<any>;
    /** A function that is executed when the widget loses focus. */
    onFocusOut: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed each time the widget's input is changed while the widget is focused. */
    onInput: EventEmitter<any>;
    /** A function that is executed when a list item is clicked or tapped. */
    onItemClick: EventEmitter<any>;
    /** A function that is executed when a user is pressing a key on the keyboard. */
    onKeyDown: EventEmitter<any>;
    /** @deprecated [important]The `keyPress` event is removed from the web standards and will be deprecated in modern browsers soon. Refer to the [MDN](https://developer.mozilla.org/en-US/docs/Web/API/Document/keypress_event) topic for details. */
    /** A function that is executed when a user presses a key on the keyboard. */
    onKeyPress: EventEmitter<any>;
    /** A function that is executed when a user releases a key on the keyboard. */
    onKeyUp: EventEmitter<any>;
    /** A function that is executed once the drop-down editor is opened. */
    onOpened: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed when the widget's input has been pasted. */
    onPaste: EventEmitter<any>;
    /** A function that is executed when a list item is selected or selection is canceled. */
    onSelectionChanged: EventEmitter<any>;
    /** A function that is executed after the widget's value is changed. */
    onValueChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    acceptCustomValueChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    activeStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    buttonsChange: EventEmitter<Array<string | DevExpress.ui.dxTextEditorButton>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.CollectionWidgetItem | any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    deferRenderingChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    displayExprChange: EventEmitter<Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    displayValueChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dropDownButtonTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dropDownOptionsChange: EventEmitter<dxPopupOptions>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    fieldTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupedChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    inputAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    isValidChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemsChange: EventEmitter<Array<any | {
        disabled?: boolean;
        html?: string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    itemTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxLengthChange: EventEmitter<number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    minSearchLengthChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    nameChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    noDataTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    openedChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    openOnFieldClickChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    placeholderChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    readOnlyChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchTimeoutChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectedItemChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showClearButtonChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showDataBeforeSearchChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showDropDownButtonChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showSelectionControlsChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    spellcheckChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    stylingModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    textChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorsChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationMessageModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationStatusChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueChangeEventChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueExprChange: EventEmitter<Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    wrapItemTextChange: EventEmitter<boolean>;
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    buttonsChildren: QueryList<DxiButtonComponent>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSelectBox;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxSelectBoxComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxSelectBoxComponent, "dx-select-box", never, {
    "acceptCustomValue": "acceptCustomValue";
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "buttons": "buttons";
    "dataSource": "dataSource";
    "deferRendering": "deferRendering";
    "disabled": "disabled";
    "displayExpr": "displayExpr";
    "displayValue": "displayValue";
    "dropDownButtonTemplate": "dropDownButtonTemplate";
    "dropDownOptions": "dropDownOptions";
    "elementAttr": "elementAttr";
    "fieldTemplate": "fieldTemplate";
    "focusStateEnabled": "focusStateEnabled";
    "grouped": "grouped";
    "groupTemplate": "groupTemplate";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "inputAttr": "inputAttr";
    "isValid": "isValid";
    "items": "items";
    "itemTemplate": "itemTemplate";
    "maxLength": "maxLength";
    "minSearchLength": "minSearchLength";
    "name": "name";
    "noDataText": "noDataText";
    "opened": "opened";
    "openOnFieldClick": "openOnFieldClick";
    "placeholder": "placeholder";
    "readOnly": "readOnly";
    "rtlEnabled": "rtlEnabled";
    "searchEnabled": "searchEnabled";
    "searchExpr": "searchExpr";
    "searchMode": "searchMode";
    "searchTimeout": "searchTimeout";
    "selectedItem": "selectedItem";
    "showClearButton": "showClearButton";
    "showDataBeforeSearch": "showDataBeforeSearch";
    "showDropDownButton": "showDropDownButton";
    "showSelectionControls": "showSelectionControls";
    "spellcheck": "spellcheck";
    "stylingMode": "stylingMode";
    "tabIndex": "tabIndex";
    "text": "text";
    "validationError": "validationError";
    "validationErrors": "validationErrors";
    "validationMessageMode": "validationMessageMode";
    "validationStatus": "validationStatus";
    "value": "value";
    "valueChangeEvent": "valueChangeEvent";
    "valueExpr": "valueExpr";
    "visible": "visible";
    "width": "width";
    "wrapItemText": "wrapItemText";
}, {
    "onChange": "onChange";
    "onClosed": "onClosed";
    "onContentReady": "onContentReady";
    "onCopy": "onCopy";
    "onCustomItemCreating": "onCustomItemCreating";
    "onCut": "onCut";
    "onDisposing": "onDisposing";
    "onEnterKey": "onEnterKey";
    "onFocusIn": "onFocusIn";
    "onFocusOut": "onFocusOut";
    "onInitialized": "onInitialized";
    "onInput": "onInput";
    "onItemClick": "onItemClick";
    "onKeyDown": "onKeyDown";
    "onKeyPress": "onKeyPress";
    "onKeyUp": "onKeyUp";
    "onOpened": "onOpened";
    "onOptionChanged": "onOptionChanged";
    "onPaste": "onPaste";
    "onSelectionChanged": "onSelectionChanged";
    "onValueChanged": "onValueChanged";
    "acceptCustomValueChange": "acceptCustomValueChange";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "buttonsChange": "buttonsChange";
    "dataSourceChange": "dataSourceChange";
    "deferRenderingChange": "deferRenderingChange";
    "disabledChange": "disabledChange";
    "displayExprChange": "displayExprChange";
    "displayValueChange": "displayValueChange";
    "dropDownButtonTemplateChange": "dropDownButtonTemplateChange";
    "dropDownOptionsChange": "dropDownOptionsChange";
    "elementAttrChange": "elementAttrChange";
    "fieldTemplateChange": "fieldTemplateChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "groupedChange": "groupedChange";
    "groupTemplateChange": "groupTemplateChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "inputAttrChange": "inputAttrChange";
    "isValidChange": "isValidChange";
    "itemsChange": "itemsChange";
    "itemTemplateChange": "itemTemplateChange";
    "maxLengthChange": "maxLengthChange";
    "minSearchLengthChange": "minSearchLengthChange";
    "nameChange": "nameChange";
    "noDataTextChange": "noDataTextChange";
    "openedChange": "openedChange";
    "openOnFieldClickChange": "openOnFieldClickChange";
    "placeholderChange": "placeholderChange";
    "readOnlyChange": "readOnlyChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "searchEnabledChange": "searchEnabledChange";
    "searchExprChange": "searchExprChange";
    "searchModeChange": "searchModeChange";
    "searchTimeoutChange": "searchTimeoutChange";
    "selectedItemChange": "selectedItemChange";
    "showClearButtonChange": "showClearButtonChange";
    "showDataBeforeSearchChange": "showDataBeforeSearchChange";
    "showDropDownButtonChange": "showDropDownButtonChange";
    "showSelectionControlsChange": "showSelectionControlsChange";
    "spellcheckChange": "spellcheckChange";
    "stylingModeChange": "stylingModeChange";
    "tabIndexChange": "tabIndexChange";
    "textChange": "textChange";
    "validationErrorChange": "validationErrorChange";
    "validationErrorsChange": "validationErrorsChange";
    "validationMessageModeChange": "validationMessageModeChange";
    "validationStatusChange": "validationStatusChange";
    "valueChange": "valueChange";
    "valueChangeEventChange": "valueChangeEventChange";
    "valueExprChange": "valueExprChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
    "wrapItemTextChange": "wrapItemTextChange";
    "onBlur": "onBlur";
}, ["buttonsChildren", "itemsChildren"]>;
}
export declare class DxSelectBoxModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxSelectBoxModule, [typeof DxSelectBoxComponent], [typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc1.DxoDropDownOptionsModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc1.DxiToolbarItemModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxSelectBoxComponent, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc1.DxoDropDownOptionsModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc1.DxiToolbarItemModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxSelectBoxModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,