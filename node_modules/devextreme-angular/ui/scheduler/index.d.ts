/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxScheduler from 'devextreme/ui/scheduler';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiResourceComponent } from 'devextreme-angular/ui/nested';
import { DxiViewComponent } from 'devextreme-angular/ui/nested';
/** The Scheduler is a widget that represents scheduled data and allows a user to manage and edit it. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxSchedulerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxScheduler;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether the widget adapts to small screens. */
    adaptivityEnabled: boolean;
    /** Specifies the name of the data source item field whose value defines whether or not the corresponding appointment is an all-day appointment. */
    allDayExpr: string;
    /** Specifies a custom template for cell overflow indicators. */
    appointmentCollectorTemplate: any;
    /** Configures appointment reordering using drag and drop gestures. */
    appointmentDragging: {
        autoScroll?: boolean;
        data?: any;
        group?: string;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    };
    /** Specifies a custom template for appointments. */
    appointmentTemplate: any;
    /** Specifies a custom template for tooltips displayed when users click an appointment or cell overflow indicator. */
    appointmentTooltipTemplate: any;
    /** Specifies cell duration in minutes. */
    cellDuration: number;
    /** Specifies whether or not an end-user can scroll the view in both directions at the same time. */
    crossScrollingEnabled: boolean;
    /** Specifies a date displayed on the current scheduler view by default. */
    currentDate: Date | number | string;
    /** Specifies the currently displayed view. Accepts the view's name or type. */
    currentView: string;
    /** Customizes the date navigator's text. */
    customizeDateNavigatorText: Function;
    /** Specifies a custom template for table cells. */
    dataCellTemplate: any;
    /** Binds the widget to data. */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxSchedulerAppointment>;
    /** Specifies a custom template for day scale items. */
    dateCellTemplate: any;
    /** Specifies the date-time values' serialization format. Use it only if you do not specify the dataSource at design time. */
    dateSerializationFormat: string;
    /** Specifies the name of the data source item field whose value holds the description of the corresponding appointment. */
    descriptionExpr: string;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** @deprecated Use the appointmentTooltipTemplate option instead. */
    /** Specifies a custom template for tooltips displayed when users click a cell overflow indicator. */
    dropDownAppointmentTemplate: any;
    /** Specifies which editing operations a user can perform on appointments. */
    editing: boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowEditingTimeZones?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    };
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies the name of the data source item field that defines the ending of an appointment. */
    endDateExpr: string;
    /** Specifies the name of the data source item field that defines the timezone of the appointment end date. */
    endDateTimeZoneExpr: string;
    /** Specifies the last hour on the time scale. Accepts integer values from 0 to 24. */
    endDayHour: number;
    /** Specifies the first day of a week. Does not apply to the agenda view. */
    firstDayOfWeek: number | string;
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** If true, appointments are grouped by date first and then by resource; opposite if false. Applies only if appointments are grouped and groupOrientation is "horizontal". */
    groupByDate: boolean;
    /** Specifies the resource kinds by which the scheduler's appointments are grouped in a timetable. */
    groups: Array<string>;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies the time interval between when the date-time indicator changes its position, in milliseconds. */
    indicatorUpdateInterval: number;
    /** The latest date the widget allows you to select. */
    max: Date | number | string;
    /** Specifies the limit of full-sized appointments displayed per cell. Applies to all views except "agenda". */
    maxAppointmentsPerCell: number | string;
    /** The earliest date the widget allows you to select. */
    min: Date | number | string;
    /** The text or HTML markup displayed by the widget if the item collection is empty. Available for the Agenda view only. */
    noDataText: string;
    /** Specifies the edit mode for recurring appointments. */
    recurrenceEditMode: string;
    /** Specifies the name of the data source item field that defines exceptions for the current recurring appointment. */
    recurrenceExceptionExpr: string;
    /** Specifies the name of the data source item field that defines a recurrence rule for generating recurring appointments. */
    recurrenceRuleExpr: string;
    /** Specifies whether filtering is performed on the server or client side. */
    remoteFiltering: boolean;
    /** Specifies a custom template for resource headers. */
    resourceCellTemplate: any;
    /** Specifies an array of resources available in the scheduler. */
    resources: Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Currently selected cells' data. */
    selectedCellData: Array<any>;
    /** Specifies whether to apply shading to cover the timetable up to the current time. */
    shadeUntilCurrentTime: boolean;
    /** Specifies the "All-day" panel's visibility. Setting this option to false hides the panel along with the all-day appointments. */
    showAllDayPanel: boolean;
    /** Specifies the current date-time indicator's visibility. */
    showCurrentTimeIndicator: boolean;
    /** Specifies the name of the data source item field that defines the start of an appointment. */
    startDateExpr: string;
    /** Specifies the name of the data source item field that defines the timezone of the appointment start date. */
    startDateTimeZoneExpr: string;
    /** Specifies the first hour on the time scale. Accepts integer values from 0 to 24. */
    startDayHour: number;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** Specifies the name of the data source item field that holds the subject of an appointment. */
    textExpr: string;
    /** Specifies a custom template for time scale items. */
    timeCellTemplate: any;
    /** Specifies the widget's time zone. */
    timeZone: string;
    /** Specifies whether a user can switch views using tabs or a drop-down menu. */
    useDropDownViewSwitcher: boolean;
    /** Specifies and configures the views to be available in the view switcher. */
    views: string | Array<string | any | {
        agendaDuration?: number;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: number | string;
        groupByDate?: boolean;
        groupOrientation?: string;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: number | string;
        name?: string;
        resourceCellTemplate?: any;
        startDate?: Date | number | string;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: string;
    }>;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed after an appointment is added to the data source. */
    onAppointmentAdded: EventEmitter<any>;
    /** A function that is executed before an appointment is added to the data source. */
    onAppointmentAdding: EventEmitter<any>;
    /** A function that is executed when an appointment is clicked or tapped. */
    onAppointmentClick: EventEmitter<any>;
    /** A function that is executed when a user attempts to open the browser's context menu for an appointment. Allows you to replace this context menu with a custom context menu. */
    onAppointmentContextMenu: EventEmitter<any>;
    /** A function that is executed when an appointment is double-clicked or double-tapped. */
    onAppointmentDblClick: EventEmitter<any>;
    /** A function that is executed after an appointment is deleted from the data source. */
    onAppointmentDeleted: EventEmitter<any>;
    /** A function that is executed before an appointment is deleted from the data source. */
    onAppointmentDeleting: EventEmitter<any>;
    /** @deprecated Use the onAppointmentFormOpening option instead. */
    /** A function that is executed before an appointment details form is opened. */
    onAppointmentFormCreated: EventEmitter<any>;
    /** A function that is executed before an appointment details form is opened. */
    onAppointmentFormOpening: EventEmitter<any>;
    /** A function that is executed when an appointment is rendered. */
    onAppointmentRendered: EventEmitter<any>;
    /** A function that is executed after an appointment is updated in the data source. */
    onAppointmentUpdated: EventEmitter<any>;
    /** A function that is executed before an appointment is updated in the data source. */
    onAppointmentUpdating: EventEmitter<any>;
    /** A function that is executed when a view cell is clicked. */
    onCellClick: EventEmitter<any>;
    /** A function that is executed when a user attempts to open the browser's context menu for a cell. Allows you to replace this context menu with a custom context menu. */
    onCellContextMenu: EventEmitter<any>;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    adaptivityEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    allDayExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    appointmentCollectorTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    appointmentDraggingChange: EventEmitter<{
        autoScroll?: boolean;
        data?: any;
        group?: string;
        onAdd?: Function;
        onDragEnd?: Function;
        onDragMove?: Function;
        onDragStart?: Function;
        onRemove?: Function;
        scrollSensitivity?: number;
        scrollSpeed?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    appointmentTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    appointmentTooltipTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    cellDurationChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    crossScrollingEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    currentDateChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    currentViewChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    customizeDateNavigatorTextChange: EventEmitter<Function>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataCellTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxSchedulerAppointment>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dateCellTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dateSerializationFormatChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    descriptionExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dropDownAppointmentTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    editingChange: EventEmitter<boolean | {
        allowAdding?: boolean;
        allowDeleting?: boolean;
        allowDragging?: boolean;
        allowEditingTimeZones?: boolean;
        allowResizing?: boolean;
        allowTimeZoneEditing?: boolean;
        allowUpdating?: boolean;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    endDateExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    endDateTimeZoneExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    endDayHourChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    firstDayOfWeekChange: EventEmitter<number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupByDateChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    groupsChange: EventEmitter<Array<string>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    indicatorUpdateIntervalChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxAppointmentsPerCellChange: EventEmitter<number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    minChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    noDataTextChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    recurrenceEditModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    recurrenceExceptionExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    recurrenceRuleExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    remoteFilteringChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    resourceCellTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    resourcesChange: EventEmitter<Array<any | {
        allowMultiple?: boolean;
        colorExpr?: string;
        dataSource?: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
        displayExpr?: Function | string;
        fieldExpr?: string;
        label?: string;
        useColorAsDefault?: boolean;
        valueExpr?: Function | string;
    }>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    selectedCellDataChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    shadeUntilCurrentTimeChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showAllDayPanelChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showCurrentTimeIndicatorChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    startDateExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    startDateTimeZoneExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    startDayHourChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    textExprChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    timeCellTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    timeZoneChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    useDropDownViewSwitcherChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    viewsChange: EventEmitter<string | Array<string | any | {
        agendaDuration?: number;
        appointmentCollectorTemplate?: any;
        appointmentTemplate?: any;
        appointmentTooltipTemplate?: any;
        cellDuration?: number;
        dataCellTemplate?: any;
        dateCellTemplate?: any;
        dropDownAppointmentTemplate?: any;
        endDayHour?: number;
        firstDayOfWeek?: number | string;
        groupByDate?: boolean;
        groupOrientation?: string;
        groups?: Array<string>;
        intervalCount?: number;
        maxAppointmentsPerCell?: number | string;
        name?: string;
        resourceCellTemplate?: any;
        startDate?: Date | number | string;
        startDayHour?: number;
        timeCellTemplate?: any;
        type?: string;
    }>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    resourcesChildren: QueryList<DxiResourceComponent>;
    viewsChildren: QueryList<DxiViewComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxScheduler;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxSchedulerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxSchedulerComponent, "dx-scheduler", never, {
    "accessKey": "accessKey";
    "adaptivityEnabled": "adaptivityEnabled";
    "allDayExpr": "allDayExpr";
    "appointmentCollectorTemplate": "appointmentCollectorTemplate";
    "appointmentDragging": "appointmentDragging";
    "appointmentTemplate": "appointmentTemplate";
    "appointmentTooltipTemplate": "appointmentTooltipTemplate";
    "cellDuration": "cellDuration";
    "crossScrollingEnabled": "crossScrollingEnabled";
    "currentDate": "currentDate";
    "currentView": "currentView";
    "customizeDateNavigatorText": "customizeDateNavigatorText";
    "dataCellTemplate": "dataCellTemplate";
    "dataSource": "dataSource";
    "dateCellTemplate": "dateCellTemplate";
    "dateSerializationFormat": "dateSerializationFormat";
    "descriptionExpr": "descriptionExpr";
    "disabled": "disabled";
    "dropDownAppointmentTemplate": "dropDownAppointmentTemplate";
    "editing": "editing";
    "elementAttr": "elementAttr";
    "endDateExpr": "endDateExpr";
    "endDateTimeZoneExpr": "endDateTimeZoneExpr";
    "endDayHour": "endDayHour";
    "firstDayOfWeek": "firstDayOfWeek";
    "focusStateEnabled": "focusStateEnabled";
    "groupByDate": "groupByDate";
    "groups": "groups";
    "height": "height";
    "hint": "hint";
    "indicatorUpdateInterval": "indicatorUpdateInterval";
    "max": "max";
    "maxAppointmentsPerCell": "maxAppointmentsPerCell";
    "min": "min";
    "noDataText": "noDataText";
    "recurrenceEditMode": "recurrenceEditMode";
    "recurrenceExceptionExpr": "recurrenceExceptionExpr";
    "recurrenceRuleExpr": "recurrenceRuleExpr";
    "remoteFiltering": "remoteFiltering";
    "resourceCellTemplate": "resourceCellTemplate";
    "resources": "resources";
    "rtlEnabled": "rtlEnabled";
    "selectedCellData": "selectedCellData";
    "shadeUntilCurrentTime": "shadeUntilCurrentTime";
    "showAllDayPanel": "showAllDayPanel";
    "showCurrentTimeIndicator": "showCurrentTimeIndicator";
    "startDateExpr": "startDateExpr";
    "startDateTimeZoneExpr": "startDateTimeZoneExpr";
    "startDayHour": "startDayHour";
    "tabIndex": "tabIndex";
    "textExpr": "textExpr";
    "timeCellTemplate": "timeCellTemplate";
    "timeZone": "timeZone";
    "useDropDownViewSwitcher": "useDropDownViewSwitcher";
    "views": "views";
    "visible": "visible";
    "width": "width";
}, {
    "onAppointmentAdded": "onAppointmentAdded";
    "onAppointmentAdding": "onAppointmentAdding";
    "onAppointmentClick": "onAppointmentClick";
    "onAppointmentContextMenu": "onAppointmentContextMenu";
    "onAppointmentDblClick": "onAppointmentDblClick";
    "onAppointmentDeleted": "onAppointmentDeleted";
    "onAppointmentDeleting": "onAppointmentDeleting";
    "onAppointmentFormCreated": "onAppointmentFormCreated";
    "onAppointmentFormOpening": "onAppointmentFormOpening";
    "onAppointmentRendered": "onAppointmentRendered";
    "onAppointmentUpdated": "onAppointmentUpdated";
    "onAppointmentUpdating": "onAppointmentUpdating";
    "onCellClick": "onCellClick";
    "onCellContextMenu": "onCellContextMenu";
    "onContentReady": "onContentReady";
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "accessKeyChange": "accessKeyChange";
    "adaptivityEnabledChange": "adaptivityEnabledChange";
    "allDayExprChange": "allDayExprChange";
    "appointmentCollectorTemplateChange": "appointmentCollectorTemplateChange";
    "appointmentDraggingChange": "appointmentDraggingChange";
    "appointmentTemplateChange": "appointmentTemplateChange";
    "appointmentTooltipTemplateChange": "appointmentTooltipTemplateChange";
    "cellDurationChange": "cellDurationChange";
    "crossScrollingEnabledChange": "crossScrollingEnabledChange";
    "currentDateChange": "currentDateChange";
    "currentViewChange": "currentViewChange";
    "customizeDateNavigatorTextChange": "customizeDateNavigatorTextChange";
    "dataCellTemplateChange": "dataCellTemplateChange";
    "dataSourceChange": "dataSourceChange";
    "dateCellTemplateChange": "dateCellTemplateChange";
    "dateSerializationFormatChange": "dateSerializationFormatChange";
    "descriptionExprChange": "descriptionExprChange";
    "disabledChange": "disabledChange";
    "dropDownAppointmentTemplateChange": "dropDownAppointmentTemplateChange";
    "editingChange": "editingChange";
    "elementAttrChange": "elementAttrChange";
    "endDateExprChange": "endDateExprChange";
    "endDateTimeZoneExprChange": "endDateTimeZoneExprChange";
    "endDayHourChange": "endDayHourChange";
    "firstDayOfWeekChange": "firstDayOfWeekChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "groupByDateChange": "groupByDateChange";
    "groupsChange": "groupsChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "indicatorUpdateIntervalChange": "indicatorUpdateIntervalChange";
    "maxChange": "maxChange";
    "maxAppointmentsPerCellChange": "maxAppointmentsPerCellChange";
    "minChange": "minChange";
    "noDataTextChange": "noDataTextChange";
    "recurrenceEditModeChange": "recurrenceEditModeChange";
    "recurrenceExceptionExprChange": "recurrenceExceptionExprChange";
    "recurrenceRuleExprChange": "recurrenceRuleExprChange";
    "remoteFilteringChange": "remoteFilteringChange";
    "resourceCellTemplateChange": "resourceCellTemplateChange";
    "resourcesChange": "resourcesChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "selectedCellDataChange": "selectedCellDataChange";
    "shadeUntilCurrentTimeChange": "shadeUntilCurrentTimeChange";
    "showAllDayPanelChange": "showAllDayPanelChange";
    "showCurrentTimeIndicatorChange": "showCurrentTimeIndicatorChange";
    "startDateExprChange": "startDateExprChange";
    "startDateTimeZoneExprChange": "startDateTimeZoneExprChange";
    "startDayHourChange": "startDayHourChange";
    "tabIndexChange": "tabIndexChange";
    "textExprChange": "textExprChange";
    "timeCellTemplateChange": "timeCellTemplateChange";
    "timeZoneChange": "timeZoneChange";
    "useDropDownViewSwitcherChange": "useDropDownViewSwitcherChange";
    "viewsChange": "viewsChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
}, ["resourcesChildren", "viewsChildren"]>;
}
export declare class DxSchedulerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxSchedulerModule, [typeof DxSchedulerComponent], [typeof ɵngcc1.DxoAppointmentDraggingModule, typeof ɵngcc1.DxoEditingModule, typeof ɵngcc1.DxiResourceModule, typeof ɵngcc1.DxiViewModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxSchedulerComponent, typeof ɵngcc1.DxoAppointmentDraggingModule, typeof ɵngcc1.DxoEditingModule, typeof ɵngcc1.DxiResourceModule, typeof ɵngcc1.DxiViewModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxSchedulerModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTJYQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAyMC4xLjdcclxuICogQnVpbGQgZGF0ZTogVHVlIEF1ZyAyNSAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgRG9DaGVjaywgU2ltcGxlQ2hhbmdlcywgUXVlcnlMaXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCBEZXZFeHByZXNzIGZyb20gJ2RldmV4dHJlbWUvYnVuZGxlcy9keC5hbGwnO1xyXG5pbXBvcnQgRHhTY2hlZHVsZXIgZnJvbSAnZGV2ZXh0cmVtZS91aS9zY2hlZHVsZXInO1xyXG5pbXBvcnQgeyBEeENvbXBvbmVudCwgRHhUZW1wbGF0ZUhvc3QsIE5lc3RlZE9wdGlvbkhvc3QsIEl0ZXJhYmxlRGlmZmVySGVscGVyLCBXYXRjaGVySGVscGVyIH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEeGlSZXNvdXJjZUNvbXBvbmVudCB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci91aS9uZXN0ZWQnO1xyXG5pbXBvcnQgeyBEeGlWaWV3Q29tcG9uZW50IH0gZnJvbSAnZGV2ZXh0cmVtZS1hbmd1bGFyL3VpL25lc3RlZCc7XHJcbi8qKiBUaGUgU2NoZWR1bGVyIGlzIGEgd2lkZ2V0IHRoYXQgcmVwcmVzZW50cyBzY2hlZHVsZWQgZGF0YSBhbmQgYWxsb3dzIGEgdXNlciB0byBtYW5hZ2UgYW5kIGVkaXQgaXQuICovXHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIER4U2NoZWR1bGVyQ29tcG9uZW50IGV4dGVuZHMgRHhDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgRG9DaGVjayB7XHJcbiAgICBwcml2YXRlIF93YXRjaGVySGVscGVyO1xyXG4gICAgcHJpdmF0ZSBfaWRoO1xyXG4gICAgaW5zdGFuY2U6IER4U2NoZWR1bGVyO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgc2hvcnRjdXQga2V5IHRoYXQgc2V0cyBmb2N1cyBvbiB0aGUgd2lkZ2V0LiAqL1xyXG4gICAgYWNjZXNzS2V5OiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHdpZGdldCBhZGFwdHMgdG8gc21hbGwgc2NyZWVucy4gKi9cclxuICAgIGFkYXB0aXZpdHlFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgaXRlbSBmaWVsZCB3aG9zZSB2YWx1ZSBkZWZpbmVzIHdoZXRoZXIgb3Igbm90IHRoZSBjb3JyZXNwb25kaW5nIGFwcG9pbnRtZW50IGlzIGFuIGFsbC1kYXkgYXBwb2ludG1lbnQuICovXHJcbiAgICBhbGxEYXlFeHByOiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIGEgY3VzdG9tIHRlbXBsYXRlIGZvciBjZWxsIG92ZXJmbG93IGluZGljYXRvcnMuICovXHJcbiAgICBhcHBvaW50bWVudENvbGxlY3RvclRlbXBsYXRlOiBhbnk7XHJcbiAgICAvKiogQ29uZmlndXJlcyBhcHBvaW50bWVudCByZW9yZGVyaW5nIHVzaW5nIGRyYWcgYW5kIGRyb3AgZ2VzdHVyZXMuICovXHJcbiAgICBhcHBvaW50bWVudERyYWdnaW5nOiB7XHJcbiAgICAgICAgYXV0b1Njcm9sbD86IGJvb2xlYW47XHJcbiAgICAgICAgZGF0YT86IGFueTtcclxuICAgICAgICBncm91cD86IHN0cmluZztcclxuICAgICAgICBvbkFkZD86IEZ1bmN0aW9uO1xyXG4gICAgICAgIG9uRHJhZ0VuZD86IEZ1bmN0aW9uO1xyXG4gICAgICAgIG9uRHJhZ01vdmU/OiBGdW5jdGlvbjtcclxuICAgICAgICBvbkRyYWdTdGFydD86IEZ1bmN0aW9uO1xyXG4gICAgICAgIG9uUmVtb3ZlPzogRnVuY3Rpb247XHJcbiAgICAgICAgc2Nyb2xsU2Vuc2l0aXZpdHk/OiBudW1iZXI7XHJcbiAgICAgICAgc2Nyb2xsU3BlZWQ/OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgLyoqIFNwZWNpZmllcyBhIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgYXBwb2ludG1lbnRzLiAqL1xyXG4gICAgYXBwb2ludG1lbnRUZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyBhIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdG9vbHRpcHMgZGlzcGxheWVkIHdoZW4gdXNlcnMgY2xpY2sgYW4gYXBwb2ludG1lbnQgb3IgY2VsbCBvdmVyZmxvdyBpbmRpY2F0b3IuICovXHJcbiAgICBhcHBvaW50bWVudFRvb2x0aXBUZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyBjZWxsIGR1cmF0aW9uIGluIG1pbnV0ZXMuICovXHJcbiAgICBjZWxsRHVyYXRpb246IG51bWJlcjtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciBvciBub3QgYW4gZW5kLXVzZXIgY2FuIHNjcm9sbCB0aGUgdmlldyBpbiBib3RoIGRpcmVjdGlvbnMgYXQgdGhlIHNhbWUgdGltZS4gKi9cclxuICAgIGNyb3NzU2Nyb2xsaW5nRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBkYXRlIGRpc3BsYXllZCBvbiB0aGUgY3VycmVudCBzY2hlZHVsZXIgdmlldyBieSBkZWZhdWx0LiAqL1xyXG4gICAgY3VycmVudERhdGU6IERhdGUgfCBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBjdXJyZW50bHkgZGlzcGxheWVkIHZpZXcuIEFjY2VwdHMgdGhlIHZpZXcncyBuYW1lIG9yIHR5cGUuICovXHJcbiAgICBjdXJyZW50Vmlldzogc3RyaW5nO1xyXG4gICAgLyoqIEN1c3RvbWl6ZXMgdGhlIGRhdGUgbmF2aWdhdG9yJ3MgdGV4dC4gKi9cclxuICAgIGN1c3RvbWl6ZURhdGVOYXZpZ2F0b3JUZXh0OiBGdW5jdGlvbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBjdXN0b20gdGVtcGxhdGUgZm9yIHRhYmxlIGNlbGxzLiAqL1xyXG4gICAgZGF0YUNlbGxUZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIEJpbmRzIHRoZSB3aWRnZXQgdG8gZGF0YS4gKi9cclxuICAgIGRhdGFTb3VyY2U6IERldkV4cHJlc3MuZGF0YS5EYXRhU291cmNlIHwgRGV2RXhwcmVzcy5kYXRhLkRhdGFTb3VyY2VPcHRpb25zIHwgc3RyaW5nIHwgQXJyYXk8RGV2RXhwcmVzcy51aS5keFNjaGVkdWxlckFwcG9pbnRtZW50PjtcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBjdXN0b20gdGVtcGxhdGUgZm9yIGRheSBzY2FsZSBpdGVtcy4gKi9cclxuICAgIGRhdGVDZWxsVGVtcGxhdGU6IGFueTtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGRhdGUtdGltZSB2YWx1ZXMnIHNlcmlhbGl6YXRpb24gZm9ybWF0LiBVc2UgaXQgb25seSBpZiB5b3UgZG8gbm90IHNwZWNpZnkgdGhlIGRhdGFTb3VyY2UgYXQgZGVzaWduIHRpbWUuICovXHJcbiAgICBkYXRlU2VyaWFsaXphdGlvbkZvcm1hdDogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgaXRlbSBmaWVsZCB3aG9zZSB2YWx1ZSBob2xkcyB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGNvcnJlc3BvbmRpbmcgYXBwb2ludG1lbnQuICovXHJcbiAgICBkZXNjcmlwdGlvbkV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IHJlc3BvbmRzIHRvIHVzZXIgaW50ZXJhY3Rpb24uICovXHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGFwcG9pbnRtZW50VG9vbHRpcFRlbXBsYXRlIG9wdGlvbiBpbnN0ZWFkLiAqL1xyXG4gICAgLyoqIFNwZWNpZmllcyBhIGN1c3RvbSB0ZW1wbGF0ZSBmb3IgdG9vbHRpcHMgZGlzcGxheWVkIHdoZW4gdXNlcnMgY2xpY2sgYSBjZWxsIG92ZXJmbG93IGluZGljYXRvci4gKi9cclxuICAgIGRyb3BEb3duQXBwb2ludG1lbnRUZW1wbGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGljaCBlZGl0aW5nIG9wZXJhdGlvbnMgYSB1c2VyIGNhbiBwZXJmb3JtIG9uIGFwcG9pbnRtZW50cy4gKi9cclxuICAgIGVkaXRpbmc6IGJvb2xlYW4gfCB7XHJcbiAgICAgICAgYWxsb3dBZGRpbmc/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93RGVsZXRpbmc/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93RHJhZ2dpbmc/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93RWRpdGluZ1RpbWVab25lcz86IGJvb2xlYW47XHJcbiAgICAgICAgYWxsb3dSZXNpemluZz86IGJvb2xlYW47XHJcbiAgICAgICAgYWxsb3dUaW1lWm9uZUVkaXRpbmc/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93VXBkYXRpbmc/OiBib29sZWFuO1xyXG4gICAgfTtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGF0dHJpYnV0ZXMgdG8gYmUgYXR0YWNoZWQgdG8gdGhlIHdpZGdldCdzIHJvb3QgZWxlbWVudC4gKi9cclxuICAgIGVsZW1lbnRBdHRyOiBhbnk7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBuYW1lIG9mIHRoZSBkYXRhIHNvdXJjZSBpdGVtIGZpZWxkIHRoYXQgZGVmaW5lcyB0aGUgZW5kaW5nIG9mIGFuIGFwcG9pbnRtZW50LiAqL1xyXG4gICAgZW5kRGF0ZUV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlIGl0ZW0gZmllbGQgdGhhdCBkZWZpbmVzIHRoZSB0aW1lem9uZSBvZiB0aGUgYXBwb2ludG1lbnQgZW5kIGRhdGUuICovXHJcbiAgICBlbmREYXRlVGltZVpvbmVFeHByOiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBsYXN0IGhvdXIgb24gdGhlIHRpbWUgc2NhbGUuIEFjY2VwdHMgaW50ZWdlciB2YWx1ZXMgZnJvbSAwIHRvIDI0LiAqL1xyXG4gICAgZW5kRGF5SG91cjogbnVtYmVyO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgZmlyc3QgZGF5IG9mIGEgd2Vlay4gRG9lcyBub3QgYXBwbHkgdG8gdGhlIGFnZW5kYSB2aWV3LiAqL1xyXG4gICAgZmlyc3REYXlPZldlZWs6IG51bWJlciB8IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IGNhbiBiZSBmb2N1c2VkIHVzaW5nIGtleWJvYXJkIG5hdmlnYXRpb24uICovXHJcbiAgICBmb2N1c1N0YXRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBJZiB0cnVlLCBhcHBvaW50bWVudHMgYXJlIGdyb3VwZWQgYnkgZGF0ZSBmaXJzdCBhbmQgdGhlbiBieSByZXNvdXJjZTsgb3Bwb3NpdGUgaWYgZmFsc2UuIEFwcGxpZXMgb25seSBpZiBhcHBvaW50bWVudHMgYXJlIGdyb3VwZWQgYW5kIGdyb3VwT3JpZW50YXRpb24gaXMgXCJob3Jpem9udGFsXCIuICovXHJcbiAgICBncm91cEJ5RGF0ZTogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHJlc291cmNlIGtpbmRzIGJ5IHdoaWNoIHRoZSBzY2hlZHVsZXIncyBhcHBvaW50bWVudHMgYXJlIGdyb3VwZWQgaW4gYSB0aW1ldGFibGUuICovXHJcbiAgICBncm91cHM6IEFycmF5PHN0cmluZz47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB3aWRnZXQncyBoZWlnaHQuICovXHJcbiAgICBoZWlnaHQ6IG51bWJlciB8IEZ1bmN0aW9uIHwgc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0ZXh0IGZvciBhIGhpbnQgdGhhdCBhcHBlYXJzIHdoZW4gYSB1c2VyIHBhdXNlcyBvbiB0aGUgd2lkZ2V0LiAqL1xyXG4gICAgaGludDogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgdGltZSBpbnRlcnZhbCBiZXR3ZWVuIHdoZW4gdGhlIGRhdGUtdGltZSBpbmRpY2F0b3IgY2hhbmdlcyBpdHMgcG9zaXRpb24sIGluIG1pbGxpc2Vjb25kcy4gKi9cclxuICAgIGluZGljYXRvclVwZGF0ZUludGVydmFsOiBudW1iZXI7XHJcbiAgICAvKiogVGhlIGxhdGVzdCBkYXRlIHRoZSB3aWRnZXQgYWxsb3dzIHlvdSB0byBzZWxlY3QuICovXHJcbiAgICBtYXg6IERhdGUgfCBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBsaW1pdCBvZiBmdWxsLXNpemVkIGFwcG9pbnRtZW50cyBkaXNwbGF5ZWQgcGVyIGNlbGwuIEFwcGxpZXMgdG8gYWxsIHZpZXdzIGV4Y2VwdCBcImFnZW5kYVwiLiAqL1xyXG4gICAgbWF4QXBwb2ludG1lbnRzUGVyQ2VsbDogbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgLyoqIFRoZSBlYXJsaWVzdCBkYXRlIHRoZSB3aWRnZXQgYWxsb3dzIHlvdSB0byBzZWxlY3QuICovXHJcbiAgICBtaW46IERhdGUgfCBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICAvKiogVGhlIHRleHQgb3IgSFRNTCBtYXJrdXAgZGlzcGxheWVkIGJ5IHRoZSB3aWRnZXQgaWYgdGhlIGl0ZW0gY29sbGVjdGlvbiBpcyBlbXB0eS4gQXZhaWxhYmxlIGZvciB0aGUgQWdlbmRhIHZpZXcgb25seS4gKi9cclxuICAgIG5vRGF0YVRleHQ6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGVkaXQgbW9kZSBmb3IgcmVjdXJyaW5nIGFwcG9pbnRtZW50cy4gKi9cclxuICAgIHJlY3VycmVuY2VFZGl0TW9kZTogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgaXRlbSBmaWVsZCB0aGF0IGRlZmluZXMgZXhjZXB0aW9ucyBmb3IgdGhlIGN1cnJlbnQgcmVjdXJyaW5nIGFwcG9pbnRtZW50LiAqL1xyXG4gICAgcmVjdXJyZW5jZUV4Y2VwdGlvbkV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlIGl0ZW0gZmllbGQgdGhhdCBkZWZpbmVzIGEgcmVjdXJyZW5jZSBydWxlIGZvciBnZW5lcmF0aW5nIHJlY3VycmluZyBhcHBvaW50bWVudHMuICovXHJcbiAgICByZWN1cnJlbmNlUnVsZUV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciBmaWx0ZXJpbmcgaXMgcGVyZm9ybWVkIG9uIHRoZSBzZXJ2ZXIgb3IgY2xpZW50IHNpZGUuICovXHJcbiAgICByZW1vdGVGaWx0ZXJpbmc6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIGEgY3VzdG9tIHRlbXBsYXRlIGZvciByZXNvdXJjZSBoZWFkZXJzLiAqL1xyXG4gICAgcmVzb3VyY2VDZWxsVGVtcGxhdGU6IGFueTtcclxuICAgIC8qKiBTcGVjaWZpZXMgYW4gYXJyYXkgb2YgcmVzb3VyY2VzIGF2YWlsYWJsZSBpbiB0aGUgc2NoZWR1bGVyLiAqL1xyXG4gICAgcmVzb3VyY2VzOiBBcnJheTxhbnkgfCB7XHJcbiAgICAgICAgYWxsb3dNdWx0aXBsZT86IGJvb2xlYW47XHJcbiAgICAgICAgY29sb3JFeHByPzogc3RyaW5nO1xyXG4gICAgICAgIGRhdGFTb3VyY2U/OiBEZXZFeHByZXNzLmRhdGEuRGF0YVNvdXJjZSB8IERldkV4cHJlc3MuZGF0YS5EYXRhU291cmNlT3B0aW9ucyB8IHN0cmluZyB8IEFycmF5PGFueT47XHJcbiAgICAgICAgZGlzcGxheUV4cHI/OiBGdW5jdGlvbiB8IHN0cmluZztcclxuICAgICAgICBmaWVsZEV4cHI/OiBzdHJpbmc7XHJcbiAgICAgICAgbGFiZWw/OiBzdHJpbmc7XHJcbiAgICAgICAgdXNlQ29sb3JBc0RlZmF1bHQ/OiBib29sZWFuO1xyXG4gICAgICAgIHZhbHVlRXhwcj86IEZ1bmN0aW9uIHwgc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICAvKiogU3dpdGNoZXMgdGhlIHdpZGdldCB0byBhIHJpZ2h0LXRvLWxlZnQgcmVwcmVzZW50YXRpb24uICovXHJcbiAgICBydGxFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIEN1cnJlbnRseSBzZWxlY3RlZCBjZWxscycgZGF0YS4gKi9cclxuICAgIHNlbGVjdGVkQ2VsbERhdGE6IEFycmF5PGFueT47XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdG8gYXBwbHkgc2hhZGluZyB0byBjb3ZlciB0aGUgdGltZXRhYmxlIHVwIHRvIHRoZSBjdXJyZW50IHRpbWUuICovXHJcbiAgICBzaGFkZVVudGlsQ3VycmVudFRpbWU6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSBcIkFsbC1kYXlcIiBwYW5lbCdzIHZpc2liaWxpdHkuIFNldHRpbmcgdGhpcyBvcHRpb24gdG8gZmFsc2UgaGlkZXMgdGhlIHBhbmVsIGFsb25nIHdpdGggdGhlIGFsbC1kYXkgYXBwb2ludG1lbnRzLiAqL1xyXG4gICAgc2hvd0FsbERheVBhbmVsOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgY3VycmVudCBkYXRlLXRpbWUgaW5kaWNhdG9yJ3MgdmlzaWJpbGl0eS4gKi9cclxuICAgIHNob3dDdXJyZW50VGltZUluZGljYXRvcjogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlIGl0ZW0gZmllbGQgdGhhdCBkZWZpbmVzIHRoZSBzdGFydCBvZiBhbiBhcHBvaW50bWVudC4gKi9cclxuICAgIHN0YXJ0RGF0ZUV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG5hbWUgb2YgdGhlIGRhdGEgc291cmNlIGl0ZW0gZmllbGQgdGhhdCBkZWZpbmVzIHRoZSB0aW1lem9uZSBvZiB0aGUgYXBwb2ludG1lbnQgc3RhcnQgZGF0ZS4gKi9cclxuICAgIHN0YXJ0RGF0ZVRpbWVab25lRXhwcjogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgZmlyc3QgaG91ciBvbiB0aGUgdGltZSBzY2FsZS4gQWNjZXB0cyBpbnRlZ2VyIHZhbHVlcyBmcm9tIDAgdG8gMjQuICovXHJcbiAgICBzdGFydERheUhvdXI6IG51bWJlcjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIG51bWJlciBvZiB0aGUgZWxlbWVudCB3aGVuIHRoZSBUYWIga2V5IGlzIHVzZWQgZm9yIG5hdmlnYXRpbmcuICovXHJcbiAgICB0YWJJbmRleDogbnVtYmVyO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgbmFtZSBvZiB0aGUgZGF0YSBzb3VyY2UgaXRlbSBmaWVsZCB0aGF0IGhvbGRzIHRoZSBzdWJqZWN0IG9mIGFuIGFwcG9pbnRtZW50LiAqL1xyXG4gICAgdGV4dEV4cHI6IHN0cmluZztcclxuICAgIC8qKiBTcGVjaWZpZXMgYSBjdXN0b20gdGVtcGxhdGUgZm9yIHRpbWUgc2NhbGUgaXRlbXMuICovXHJcbiAgICB0aW1lQ2VsbFRlbXBsYXRlOiBhbnk7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB3aWRnZXQncyB0aW1lIHpvbmUuICovXHJcbiAgICB0aW1lWm9uZTogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIGEgdXNlciBjYW4gc3dpdGNoIHZpZXdzIHVzaW5nIHRhYnMgb3IgYSBkcm9wLWRvd24gbWVudS4gKi9cclxuICAgIHVzZURyb3BEb3duVmlld1N3aXRjaGVyOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyBhbmQgY29uZmlndXJlcyB0aGUgdmlld3MgdG8gYmUgYXZhaWxhYmxlIGluIHRoZSB2aWV3IHN3aXRjaGVyLiAqL1xyXG4gICAgdmlld3M6IHN0cmluZyB8IEFycmF5PHN0cmluZyB8IGFueSB8IHtcclxuICAgICAgICBhZ2VuZGFEdXJhdGlvbj86IG51bWJlcjtcclxuICAgICAgICBhcHBvaW50bWVudENvbGxlY3RvclRlbXBsYXRlPzogYW55O1xyXG4gICAgICAgIGFwcG9pbnRtZW50VGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgYXBwb2ludG1lbnRUb29sdGlwVGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgY2VsbER1cmF0aW9uPzogbnVtYmVyO1xyXG4gICAgICAgIGRhdGFDZWxsVGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgZGF0ZUNlbGxUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICBkcm9wRG93bkFwcG9pbnRtZW50VGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgZW5kRGF5SG91cj86IG51bWJlcjtcclxuICAgICAgICBmaXJzdERheU9mV2Vlaz86IG51bWJlciB8IHN0cmluZztcclxuICAgICAgICBncm91cEJ5RGF0ZT86IGJvb2xlYW47XHJcbiAgICAgICAgZ3JvdXBPcmllbnRhdGlvbj86IHN0cmluZztcclxuICAgICAgICBncm91cHM/OiBBcnJheTxzdHJpbmc+O1xyXG4gICAgICAgIGludGVydmFsQ291bnQ/OiBudW1iZXI7XHJcbiAgICAgICAgbWF4QXBwb2ludG1lbnRzUGVyQ2VsbD86IG51bWJlciB8IHN0cmluZztcclxuICAgICAgICBuYW1lPzogc3RyaW5nO1xyXG4gICAgICAgIHJlc291cmNlQ2VsbFRlbXBsYXRlPzogYW55O1xyXG4gICAgICAgIHN0YXJ0RGF0ZT86IERhdGUgfCBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICAgICAgc3RhcnREYXlIb3VyPzogbnVtYmVyO1xyXG4gICAgICAgIHRpbWVDZWxsVGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgdHlwZT86IHN0cmluZztcclxuICAgIH0+O1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSB3aWRnZXQgaXMgdmlzaWJsZS4gKi9cclxuICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB3aWRnZXQncyB3aWR0aC4gKi9cclxuICAgIHdpZHRoOiBudW1iZXIgfCBGdW5jdGlvbiB8IHN0cmluZztcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYWZ0ZXIgYW4gYXBwb2ludG1lbnQgaXMgYWRkZWQgdG8gdGhlIGRhdGEgc291cmNlLiAqL1xyXG4gICAgb25BcHBvaW50bWVudEFkZGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIGFuIGFwcG9pbnRtZW50IGlzIGFkZGVkIHRvIHRoZSBkYXRhIHNvdXJjZS4gKi9cclxuICAgIG9uQXBwb2ludG1lbnRBZGRpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGFuIGFwcG9pbnRtZW50IGlzIGNsaWNrZWQgb3IgdGFwcGVkLiAqL1xyXG4gICAgb25BcHBvaW50bWVudENsaWNrOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiBhIHVzZXIgYXR0ZW1wdHMgdG8gb3BlbiB0aGUgYnJvd3NlcidzIGNvbnRleHQgbWVudSBmb3IgYW4gYXBwb2ludG1lbnQuIEFsbG93cyB5b3UgdG8gcmVwbGFjZSB0aGlzIGNvbnRleHQgbWVudSB3aXRoIGEgY3VzdG9tIGNvbnRleHQgbWVudS4gKi9cclxuICAgIG9uQXBwb2ludG1lbnRDb250ZXh0TWVudTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gYW4gYXBwb2ludG1lbnQgaXMgZG91YmxlLWNsaWNrZWQgb3IgZG91YmxlLXRhcHBlZC4gKi9cclxuICAgIG9uQXBwb2ludG1lbnREYmxDbGljazogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGFuIGFwcG9pbnRtZW50IGlzIGRlbGV0ZWQgZnJvbSB0aGUgZGF0YSBzb3VyY2UuICovXHJcbiAgICBvbkFwcG9pbnRtZW50RGVsZXRlZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSBhbiBhcHBvaW50bWVudCBpcyBkZWxldGVkIGZyb20gdGhlIGRhdGEgc291cmNlLiAqL1xyXG4gICAgb25BcHBvaW50bWVudERlbGV0aW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBAZGVwcmVjYXRlZCBVc2UgdGhlIG9uQXBwb2ludG1lbnRGb3JtT3BlbmluZyBvcHRpb24gaW5zdGVhZC4gKi9cclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIGFuIGFwcG9pbnRtZW50IGRldGFpbHMgZm9ybSBpcyBvcGVuZWQuICovXHJcbiAgICBvbkFwcG9pbnRtZW50Rm9ybUNyZWF0ZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBiZWZvcmUgYW4gYXBwb2ludG1lbnQgZGV0YWlscyBmb3JtIGlzIG9wZW5lZC4gKi9cclxuICAgIG9uQXBwb2ludG1lbnRGb3JtT3BlbmluZzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIHdoZW4gYW4gYXBwb2ludG1lbnQgaXMgcmVuZGVyZWQuICovXHJcbiAgICBvbkFwcG9pbnRtZW50UmVuZGVyZWQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCBhZnRlciBhbiBhcHBvaW50bWVudCBpcyB1cGRhdGVkIGluIHRoZSBkYXRhIHNvdXJjZS4gKi9cclxuICAgIG9uQXBwb2ludG1lbnRVcGRhdGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIGFuIGFwcG9pbnRtZW50IGlzIHVwZGF0ZWQgaW4gdGhlIGRhdGEgc291cmNlLiAqL1xyXG4gICAgb25BcHBvaW50bWVudFVwZGF0aW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiBhIHZpZXcgY2VsbCBpcyBjbGlja2VkLiAqL1xyXG4gICAgb25DZWxsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdGhhdCBpcyBleGVjdXRlZCB3aGVuIGEgdXNlciBhdHRlbXB0cyB0byBvcGVuIHRoZSBicm93c2VyJ3MgY29udGV4dCBtZW51IGZvciBhIGNlbGwuIEFsbG93cyB5b3UgdG8gcmVwbGFjZSB0aGlzIGNvbnRleHQgbWVudSB3aXRoIGEgY3VzdG9tIGNvbnRleHQgbWVudS4gKi9cclxuICAgIG9uQ2VsbENvbnRleHRNZW51OiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB0aGUgd2lkZ2V0J3MgY29udGVudCBpcyByZWFkeSBhbmQgZWFjaCB0aW1lIHRoZSBjb250ZW50IGlzIGNoYW5nZWQuICovXHJcbiAgICBvbkNvbnRlbnRSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRpc3Bvc2VkIG9mLiAqL1xyXG4gICAgb25EaXNwb3Npbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdXNlZCBpbiBKYXZhU2NyaXB0IGZyYW1ld29ya3MgdG8gc2F2ZSB0aGUgd2lkZ2V0IGluc3RhbmNlLiAqL1xyXG4gICAgb25Jbml0aWFsaXplZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGEgd2lkZ2V0IG9wdGlvbiBpcyBjaGFuZ2VkLiAqL1xyXG4gICAgb25PcHRpb25DaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWNjZXNzS2V5Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWRhcHRpdml0eUVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWxsRGF5RXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFwcG9pbnRtZW50Q29sbGVjdG9yVGVtcGxhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBhcHBvaW50bWVudERyYWdnaW5nQ2hhbmdlOiBFdmVudEVtaXR0ZXI8e1xyXG4gICAgICAgIGF1dG9TY3JvbGw/OiBib29sZWFuO1xyXG4gICAgICAgIGRhdGE/OiBhbnk7XHJcbiAgICAgICAgZ3JvdXA/OiBzdHJpbmc7XHJcbiAgICAgICAgb25BZGQ/OiBGdW5jdGlvbjtcclxuICAgICAgICBvbkRyYWdFbmQ/OiBGdW5jdGlvbjtcclxuICAgICAgICBvbkRyYWdNb3ZlPzogRnVuY3Rpb247XHJcbiAgICAgICAgb25EcmFnU3RhcnQ/OiBGdW5jdGlvbjtcclxuICAgICAgICBvblJlbW92ZT86IEZ1bmN0aW9uO1xyXG4gICAgICAgIHNjcm9sbFNlbnNpdGl2aXR5PzogbnVtYmVyO1xyXG4gICAgICAgIHNjcm9sbFNwZWVkPzogbnVtYmVyO1xyXG4gICAgfT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFwcG9pbnRtZW50VGVtcGxhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBhcHBvaW50bWVudFRvb2x0aXBUZW1wbGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGNlbGxEdXJhdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGNyb3NzU2Nyb2xsaW5nRW5hYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBjdXJyZW50RGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPERhdGUgfCBudW1iZXIgfCBzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBjdXJyZW50Vmlld0NoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGN1c3RvbWl6ZURhdGVOYXZpZ2F0b3JUZXh0Q2hhbmdlOiBFdmVudEVtaXR0ZXI8RnVuY3Rpb24+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBkYXRhQ2VsbFRlbXBsYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZGF0YVNvdXJjZUNoYW5nZTogRXZlbnRFbWl0dGVyPERldkV4cHJlc3MuZGF0YS5EYXRhU291cmNlIHwgRGV2RXhwcmVzcy5kYXRhLkRhdGFTb3VyY2VPcHRpb25zIHwgc3RyaW5nIHwgQXJyYXk8RGV2RXhwcmVzcy51aS5keFNjaGVkdWxlckFwcG9pbnRtZW50Pj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGRhdGVDZWxsVGVtcGxhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBkYXRlU2VyaWFsaXphdGlvbkZvcm1hdENoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGRlc2NyaXB0aW9uRXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGRpc2FibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGRyb3BEb3duQXBwb2ludG1lbnRUZW1wbGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGVkaXRpbmdDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuIHwge1xyXG4gICAgICAgIGFsbG93QWRkaW5nPzogYm9vbGVhbjtcclxuICAgICAgICBhbGxvd0RlbGV0aW5nPzogYm9vbGVhbjtcclxuICAgICAgICBhbGxvd0RyYWdnaW5nPzogYm9vbGVhbjtcclxuICAgICAgICBhbGxvd0VkaXRpbmdUaW1lWm9uZXM/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93UmVzaXppbmc/OiBib29sZWFuO1xyXG4gICAgICAgIGFsbG93VGltZVpvbmVFZGl0aW5nPzogYm9vbGVhbjtcclxuICAgICAgICBhbGxvd1VwZGF0aW5nPzogYm9vbGVhbjtcclxuICAgIH0+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBlbGVtZW50QXR0ckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGVuZERhdGVFeHByQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgZW5kRGF0ZVRpbWVab25lRXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGVuZERheUhvdXJDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBmaXJzdERheU9mV2Vla0NoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlciB8IHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGZvY3VzU3RhdGVFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGdyb3VwQnlEYXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGdyb3Vwc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PHN0cmluZz4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBoZWlnaHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXIgfCBGdW5jdGlvbiB8IHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGhpbnRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBpbmRpY2F0b3JVcGRhdGVJbnRlcnZhbENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIG1heENoYW5nZTogRXZlbnRFbWl0dGVyPERhdGUgfCBudW1iZXIgfCBzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBtYXhBcHBvaW50bWVudHNQZXJDZWxsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgc3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgbWluQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGF0ZSB8IG51bWJlciB8IHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIG5vRGF0YVRleHRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICByZWN1cnJlbmNlRWRpdE1vZGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICByZWN1cnJlbmNlRXhjZXB0aW9uRXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHJlY3VycmVuY2VSdWxlRXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHJlbW90ZUZpbHRlcmluZ0NoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICByZXNvdXJjZUNlbGxUZW1wbGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHJlc291cmNlc0NoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PGFueSB8IHtcclxuICAgICAgICBhbGxvd011bHRpcGxlPzogYm9vbGVhbjtcclxuICAgICAgICBjb2xvckV4cHI/OiBzdHJpbmc7XHJcbiAgICAgICAgZGF0YVNvdXJjZT86IERldkV4cHJlc3MuZGF0YS5EYXRhU291cmNlIHwgRGV2RXhwcmVzcy5kYXRhLkRhdGFTb3VyY2VPcHRpb25zIHwgc3RyaW5nIHwgQXJyYXk8YW55PjtcclxuICAgICAgICBkaXNwbGF5RXhwcj86IEZ1bmN0aW9uIHwgc3RyaW5nO1xyXG4gICAgICAgIGZpZWxkRXhwcj86IHN0cmluZztcclxuICAgICAgICBsYWJlbD86IHN0cmluZztcclxuICAgICAgICB1c2VDb2xvckFzRGVmYXVsdD86IGJvb2xlYW47XHJcbiAgICAgICAgdmFsdWVFeHByPzogRnVuY3Rpb24gfCBzdHJpbmc7XHJcbiAgICB9Pj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHJ0bEVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VsZWN0ZWRDZWxsRGF0YUNoYW5nZTogRXZlbnRFbWl0dGVyPEFycmF5PGFueT4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzaGFkZVVudGlsQ3VycmVudFRpbWVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2hvd0FsbERheVBhbmVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHNob3dDdXJyZW50VGltZUluZGljYXRvckNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBzdGFydERhdGVFeHByQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc3RhcnREYXRlVGltZVpvbmVFeHByQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc3RhcnREYXlIb3VyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgdGFiSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB0ZXh0RXhwckNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHRpbWVDZWxsVGVtcGxhdGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB0aW1lWm9uZUNoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHVzZURyb3BEb3duVmlld1N3aXRjaGVyQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHZpZXdzQ2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nIHwgQXJyYXk8c3RyaW5nIHwgYW55IHwge1xyXG4gICAgICAgIGFnZW5kYUR1cmF0aW9uPzogbnVtYmVyO1xyXG4gICAgICAgIGFwcG9pbnRtZW50Q29sbGVjdG9yVGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgYXBwb2ludG1lbnRUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICBhcHBvaW50bWVudFRvb2x0aXBUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICBjZWxsRHVyYXRpb24/OiBudW1iZXI7XHJcbiAgICAgICAgZGF0YUNlbGxUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICBkYXRlQ2VsbFRlbXBsYXRlPzogYW55O1xyXG4gICAgICAgIGRyb3BEb3duQXBwb2ludG1lbnRUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICBlbmREYXlIb3VyPzogbnVtYmVyO1xyXG4gICAgICAgIGZpcnN0RGF5T2ZXZWVrPzogbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgICAgIGdyb3VwQnlEYXRlPzogYm9vbGVhbjtcclxuICAgICAgICBncm91cE9yaWVudGF0aW9uPzogc3RyaW5nO1xyXG4gICAgICAgIGdyb3Vwcz86IEFycmF5PHN0cmluZz47XHJcbiAgICAgICAgaW50ZXJ2YWxDb3VudD86IG51bWJlcjtcclxuICAgICAgICBtYXhBcHBvaW50bWVudHNQZXJDZWxsPzogbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgICAgIG5hbWU/OiBzdHJpbmc7XHJcbiAgICAgICAgcmVzb3VyY2VDZWxsVGVtcGxhdGU/OiBhbnk7XHJcbiAgICAgICAgc3RhcnREYXRlPzogRGF0ZSB8IG51bWJlciB8IHN0cmluZztcclxuICAgICAgICBzdGFydERheUhvdXI/OiBudW1iZXI7XHJcbiAgICAgICAgdGltZUNlbGxUZW1wbGF0ZT86IGFueTtcclxuICAgICAgICB0eXBlPzogc3RyaW5nO1xyXG4gICAgfT4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB2aXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHdpZHRoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgcmVzb3VyY2VzQ2hpbGRyZW46IFF1ZXJ5TGlzdDxEeGlSZXNvdXJjZUNvbXBvbmVudD47XHJcbiAgICB2aWV3c0NoaWxkcmVuOiBRdWVyeUxpc3Q8RHhpVmlld0NvbXBvbmVudD47XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgdGVtcGxhdGVIb3N0OiBEeFRlbXBsYXRlSG9zdCwgX3dhdGNoZXJIZWxwZXI6IFdhdGNoZXJIZWxwZXIsIF9pZGg6IEl0ZXJhYmxlRGlmZmVySGVscGVyLCBvcHRpb25Ib3N0OiBOZXN0ZWRPcHRpb25Ib3N0LCB0cmFuc2ZlclN0YXRlOiBUcmFuc2ZlclN0YXRlLCBwbGF0Zm9ybUlkOiBhbnkpO1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVJbnN0YW5jZShlbGVtZW50OiBhbnksIG9wdGlvbnM6IGFueSk6IER4U2NoZWR1bGVyO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgc2V0dXBDaGFuZ2VzKHByb3A6IHN0cmluZywgY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0RvQ2hlY2soKTogdm9pZDtcclxuICAgIF9zZXRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeFNjaGVkdWxlck1vZHVsZSB7XHJcbn1cclxuIl19