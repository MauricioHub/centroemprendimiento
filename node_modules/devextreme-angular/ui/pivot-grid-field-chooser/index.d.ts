/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxPivotGridFieldChooser from 'devextreme/ui/pivot_grid_field_chooser';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/** A complementary widget for the PivotGrid that allows you to manage data displayed in the PivotGrid. The field chooser is already integrated in the PivotGrid and can be invoked using the context menu. If you need to continuously display the field chooser near the PivotGrid widget, use the PivotGridFieldChooser widget. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxPivotGridFieldChooserComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxPivotGridFieldChooser;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether or not the widget changes its state when interacting with a user. */
    activeStateEnabled: boolean;
    /** Specifies whether the field chooser allows searching in the "All Fields" section. */
    allowSearch: boolean;
    /** Specifies when to apply changes made in the widget to the PivotGrid. */
    applyChangesMode: string;
    /** The data source of a PivotGrid widget. */
    dataSource: DevExpress.data.PivotGridDataSource;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** Configures the header filter feature. */
    headerFilter: {
        allowSearch?: boolean;
        height?: number;
        searchTimeout?: number;
        showRelevantValues?: boolean;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        width?: number;
    };
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies the field chooser layout. */
    layout: number | string;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies a delay in milliseconds between when a user finishes typing in the field chooser's search panel, and when the search is executed. */
    searchTimeout: number;
    /** The widget's state. */
    state: any;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** Strings that can be changed or localized in the PivotGridFieldChooser widget. */
    texts: {
        allFields?: string;
        columnFields?: string;
        dataFields?: string;
        filterFields?: string;
        rowFields?: string;
    };
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** A function that is executed when the widget's content is ready and each time the content is changed. */
    onContentReady: EventEmitter<any>;
    /** A function that is executed before the context menu is rendered. */
    onContextMenuPreparing: EventEmitter<any>;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    activeStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    allowSearchChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    applyChangesModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dataSourceChange: EventEmitter<DevExpress.data.PivotGridDataSource>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    headerFilterChange: EventEmitter<{
        allowSearch?: boolean;
        height?: number;
        searchTimeout?: number;
        showRelevantValues?: boolean;
        texts?: {
            cancel?: string;
            emptyValue?: string;
            ok?: string;
        };
        width?: number;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    layoutChange: EventEmitter<number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    searchTimeoutChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    stateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    textsChange: EventEmitter<{
        allFields?: string;
        columnFields?: string;
        dataFields?: string;
        filterFields?: string;
        rowFields?: string;
    }>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxPivotGridFieldChooser;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxPivotGridFieldChooserComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxPivotGridFieldChooserComponent, "dx-pivot-grid-field-chooser", never, {
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "allowSearch": "allowSearch";
    "applyChangesMode": "applyChangesMode";
    "dataSource": "dataSource";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "focusStateEnabled": "focusStateEnabled";
    "headerFilter": "headerFilter";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "layout": "layout";
    "rtlEnabled": "rtlEnabled";
    "searchTimeout": "searchTimeout";
    "state": "state";
    "tabIndex": "tabIndex";
    "texts": "texts";
    "visible": "visible";
    "width": "width";
}, {
    "onContentReady": "onContentReady";
    "onContextMenuPreparing": "onContextMenuPreparing";
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "allowSearchChange": "allowSearchChange";
    "applyChangesModeChange": "applyChangesModeChange";
    "dataSourceChange": "dataSourceChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "headerFilterChange": "headerFilterChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "layoutChange": "layoutChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "searchTimeoutChange": "searchTimeoutChange";
    "stateChange": "stateChange";
    "tabIndexChange": "tabIndexChange";
    "textsChange": "textsChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
}, never>;
}
export declare class DxPivotGridFieldChooserModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxPivotGridFieldChooserModule, [typeof DxPivotGridFieldChooserComponent], [typeof ɵngcc1.DxoHeaderFilterModule, typeof ɵngcc1.DxoTextsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxPivotGridFieldChooserComponent, typeof ɵngcc1.DxoHeaderFilterModule, typeof ɵngcc1.DxoTextsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxPivotGridFieldChooserModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguZC50cyIsInNvdXJjZXMiOlsiaW5kZXguZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVJQTs7OztBQUVBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAyMC4xLjdcclxuICogQnVpbGQgZGF0ZTogVHVlIEF1ZyAyNSAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IEVsZW1lbnRSZWYsIE5nWm9uZSwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcywgRG9DaGVjaywgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgRGV2RXhwcmVzcyBmcm9tICdkZXZleHRyZW1lL2J1bmRsZXMvZHguYWxsJztcclxuaW1wb3J0IER4UGl2b3RHcmlkRmllbGRDaG9vc2VyIGZyb20gJ2RldmV4dHJlbWUvdWkvcGl2b3RfZ3JpZF9maWVsZF9jaG9vc2VyJztcclxuaW1wb3J0IHsgRHhDb21wb25lbnQsIER4VGVtcGxhdGVIb3N0LCBOZXN0ZWRPcHRpb25Ib3N0LCBJdGVyYWJsZURpZmZlckhlbHBlciwgV2F0Y2hlckhlbHBlciB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuLyoqIEEgY29tcGxlbWVudGFyeSB3aWRnZXQgZm9yIHRoZSBQaXZvdEdyaWQgdGhhdCBhbGxvd3MgeW91IHRvIG1hbmFnZSBkYXRhIGRpc3BsYXllZCBpbiB0aGUgUGl2b3RHcmlkLiBUaGUgZmllbGQgY2hvb3NlciBpcyBhbHJlYWR5IGludGVncmF0ZWQgaW4gdGhlIFBpdm90R3JpZCBhbmQgY2FuIGJlIGludm9rZWQgdXNpbmcgdGhlIGNvbnRleHQgbWVudS4gSWYgeW91IG5lZWQgdG8gY29udGludW91c2x5IGRpc3BsYXkgdGhlIGZpZWxkIGNob29zZXIgbmVhciB0aGUgUGl2b3RHcmlkIHdpZGdldCwgdXNlIHRoZSBQaXZvdEdyaWRGaWVsZENob29zZXIgd2lkZ2V0LiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeFBpdm90R3JpZEZpZWxkQ2hvb3NlckNvbXBvbmVudCBleHRlbmRzIER4Q29tcG9uZW50IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIERvQ2hlY2sge1xyXG4gICAgcHJpdmF0ZSBfd2F0Y2hlckhlbHBlcjtcclxuICAgIHByaXZhdGUgX2lkaDtcclxuICAgIGluc3RhbmNlOiBEeFBpdm90R3JpZEZpZWxkQ2hvb3NlcjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHNob3J0Y3V0IGtleSB0aGF0IHNldHMgZm9jdXMgb24gdGhlIHdpZGdldC4gKi9cclxuICAgIGFjY2Vzc0tleTogc3RyaW5nO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIG9yIG5vdCB0aGUgd2lkZ2V0IGNoYW5nZXMgaXRzIHN0YXRlIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCBhIHVzZXIuICovXHJcbiAgICBhY3RpdmVTdGF0ZUVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIGZpZWxkIGNob29zZXIgYWxsb3dzIHNlYXJjaGluZyBpbiB0aGUgXCJBbGwgRmllbGRzXCIgc2VjdGlvbi4gKi9cclxuICAgIGFsbG93U2VhcmNoOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGVuIHRvIGFwcGx5IGNoYW5nZXMgbWFkZSBpbiB0aGUgd2lkZ2V0IHRvIHRoZSBQaXZvdEdyaWQuICovXHJcbiAgICBhcHBseUNoYW5nZXNNb2RlOiBzdHJpbmc7XHJcbiAgICAvKiogVGhlIGRhdGEgc291cmNlIG9mIGEgUGl2b3RHcmlkIHdpZGdldC4gKi9cclxuICAgIGRhdGFTb3VyY2U6IERldkV4cHJlc3MuZGF0YS5QaXZvdEdyaWREYXRhU291cmNlO1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSB3aWRnZXQgcmVzcG9uZHMgdG8gdXNlciBpbnRlcmFjdGlvbi4gKi9cclxuICAgIGRpc2FibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgYXR0cmlidXRlcyB0byBiZSBhdHRhY2hlZCB0byB0aGUgd2lkZ2V0J3Mgcm9vdCBlbGVtZW50LiAqL1xyXG4gICAgZWxlbWVudEF0dHI6IGFueTtcclxuICAgIC8qKiBTcGVjaWZpZXMgd2hldGhlciB0aGUgd2lkZ2V0IGNhbiBiZSBmb2N1c2VkIHVzaW5nIGtleWJvYXJkIG5hdmlnYXRpb24uICovXHJcbiAgICBmb2N1c1N0YXRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBDb25maWd1cmVzIHRoZSBoZWFkZXIgZmlsdGVyIGZlYXR1cmUuICovXHJcbiAgICBoZWFkZXJGaWx0ZXI6IHtcclxuICAgICAgICBhbGxvd1NlYXJjaD86IGJvb2xlYW47XHJcbiAgICAgICAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgICAgIHNlYXJjaFRpbWVvdXQ/OiBudW1iZXI7XHJcbiAgICAgICAgc2hvd1JlbGV2YW50VmFsdWVzPzogYm9vbGVhbjtcclxuICAgICAgICB0ZXh0cz86IHtcclxuICAgICAgICAgICAgY2FuY2VsPzogc3RyaW5nO1xyXG4gICAgICAgICAgICBlbXB0eVZhbHVlPzogc3RyaW5nO1xyXG4gICAgICAgICAgICBvaz86IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgfTtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIHdpZGdldCdzIGhlaWdodC4gKi9cclxuICAgIGhlaWdodDogbnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHRleHQgZm9yIGEgaGludCB0aGF0IGFwcGVhcnMgd2hlbiBhIHVzZXIgcGF1c2VzIG9uIHRoZSB3aWRnZXQuICovXHJcbiAgICBoaW50OiBzdHJpbmc7XHJcbiAgICAvKiogU3BlY2lmaWVzIHdoZXRoZXIgdGhlIHdpZGdldCBjaGFuZ2VzIGl0cyBzdGF0ZSB3aGVuIGEgdXNlciBwYXVzZXMgb24gaXQuICovXHJcbiAgICBob3ZlclN0YXRlRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIC8qKiBTcGVjaWZpZXMgdGhlIGZpZWxkIGNob29zZXIgbGF5b3V0LiAqL1xyXG4gICAgbGF5b3V0OiBudW1iZXIgfCBzdHJpbmc7XHJcbiAgICAvKiogU3dpdGNoZXMgdGhlIHdpZGdldCB0byBhIHJpZ2h0LXRvLWxlZnQgcmVwcmVzZW50YXRpb24uICovXHJcbiAgICBydGxFbmFibGVkOiBib29sZWFuO1xyXG4gICAgLyoqIFNwZWNpZmllcyBhIGRlbGF5IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHdoZW4gYSB1c2VyIGZpbmlzaGVzIHR5cGluZyBpbiB0aGUgZmllbGQgY2hvb3NlcidzIHNlYXJjaCBwYW5lbCwgYW5kIHdoZW4gdGhlIHNlYXJjaCBpcyBleGVjdXRlZC4gKi9cclxuICAgIHNlYXJjaFRpbWVvdXQ6IG51bWJlcjtcclxuICAgIC8qKiBUaGUgd2lkZ2V0J3Mgc3RhdGUuICovXHJcbiAgICBzdGF0ZTogYW55O1xyXG4gICAgLyoqIFNwZWNpZmllcyB0aGUgbnVtYmVyIG9mIHRoZSBlbGVtZW50IHdoZW4gdGhlIFRhYiBrZXkgaXMgdXNlZCBmb3IgbmF2aWdhdGluZy4gKi9cclxuICAgIHRhYkluZGV4OiBudW1iZXI7XHJcbiAgICAvKiogU3RyaW5ncyB0aGF0IGNhbiBiZSBjaGFuZ2VkIG9yIGxvY2FsaXplZCBpbiB0aGUgUGl2b3RHcmlkRmllbGRDaG9vc2VyIHdpZGdldC4gKi9cclxuICAgIHRleHRzOiB7XHJcbiAgICAgICAgYWxsRmllbGRzPzogc3RyaW5nO1xyXG4gICAgICAgIGNvbHVtbkZpZWxkcz86IHN0cmluZztcclxuICAgICAgICBkYXRhRmllbGRzPzogc3RyaW5nO1xyXG4gICAgICAgIGZpbHRlckZpZWxkcz86IHN0cmluZztcclxuICAgICAgICByb3dGaWVsZHM/OiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgLyoqIFNwZWNpZmllcyB3aGV0aGVyIHRoZSB3aWRnZXQgaXMgdmlzaWJsZS4gKi9cclxuICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICAvKiogU3BlY2lmaWVzIHRoZSB3aWRnZXQncyB3aWR0aC4gKi9cclxuICAgIHdpZHRoOiBudW1iZXIgfCBGdW5jdGlvbiB8IHN0cmluZztcclxuICAgIC8qKiBBIGZ1bmN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgd2hlbiB0aGUgd2lkZ2V0J3MgY29udGVudCBpcyByZWFkeSBhbmQgZWFjaCB0aW1lIHRoZSBjb250ZW50IGlzIGNoYW5nZWQuICovXHJcbiAgICBvbkNvbnRlbnRSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSB0aGUgY29udGV4dCBtZW51IGlzIHJlbmRlcmVkLiAqL1xyXG4gICAgb25Db250ZXh0TWVudVByZXBhcmluZzogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGJlZm9yZSB0aGUgd2lkZ2V0IGlzIGRpc3Bvc2VkIG9mLiAqL1xyXG4gICAgb25EaXNwb3Npbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgLyoqIEEgZnVuY3Rpb24gdXNlZCBpbiBKYXZhU2NyaXB0IGZyYW1ld29ya3MgdG8gc2F2ZSB0aGUgd2lkZ2V0IGluc3RhbmNlLiAqL1xyXG4gICAgb25Jbml0aWFsaXplZDogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogQSBmdW5jdGlvbiB0aGF0IGlzIGV4ZWN1dGVkIGFmdGVyIGEgd2lkZ2V0IG9wdGlvbiBpcyBjaGFuZ2VkLiAqL1xyXG4gICAgb25PcHRpb25DaGFuZ2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWNjZXNzS2V5Q2hhbmdlOiBFdmVudEVtaXR0ZXI8c3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgYWN0aXZlU3RhdGVFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFsbG93U2VhcmNoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGFwcGx5Q2hhbmdlc01vZGVDaGFuZ2U6IEV2ZW50RW1pdHRlcjxzdHJpbmc+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBkYXRhU291cmNlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGV2RXhwcmVzcy5kYXRhLlBpdm90R3JpZERhdGFTb3VyY2U+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBkaXNhYmxlZENoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICBlbGVtZW50QXR0ckNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGZvY3VzU3RhdGVFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGhlYWRlckZpbHRlckNoYW5nZTogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICBhbGxvd1NlYXJjaD86IGJvb2xlYW47XHJcbiAgICAgICAgaGVpZ2h0PzogbnVtYmVyO1xyXG4gICAgICAgIHNlYXJjaFRpbWVvdXQ/OiBudW1iZXI7XHJcbiAgICAgICAgc2hvd1JlbGV2YW50VmFsdWVzPzogYm9vbGVhbjtcclxuICAgICAgICB0ZXh0cz86IHtcclxuICAgICAgICAgICAgY2FuY2VsPzogc3RyaW5nO1xyXG4gICAgICAgICAgICBlbXB0eVZhbHVlPzogc3RyaW5nO1xyXG4gICAgICAgICAgICBvaz86IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgfT47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGhlaWdodENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlciB8IEZ1bmN0aW9uIHwgc3RyaW5nPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgaGludENoYW5nZTogRXZlbnRFbWl0dGVyPHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGhvdmVyU3RhdGVFbmFibGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIGxheW91dENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlciB8IHN0cmluZz47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHJ0bEVuYWJsZWRDaGFuZ2U6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgc2VhcmNoVGltZW91dENoYW5nZTogRXZlbnRFbWl0dGVyPG51bWJlcj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHN0YXRlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIC8qKiBUaGlzIG1lbWJlciBzdXBwb3J0cyB0aGUgaW50ZXJuYWwgaW5mcmFzdHJ1Y3R1cmUgYW5kIGlzIG5vdCBpbnRlbmRlZCB0byBiZSB1c2VkIGRpcmVjdGx5IGZyb20geW91ciBjb2RlLiAqL1xyXG4gICAgdGFiSW5kZXhDaGFuZ2U6IEV2ZW50RW1pdHRlcjxudW1iZXI+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB0ZXh0c0NoYW5nZTogRXZlbnRFbWl0dGVyPHtcclxuICAgICAgICBhbGxGaWVsZHM/OiBzdHJpbmc7XHJcbiAgICAgICAgY29sdW1uRmllbGRzPzogc3RyaW5nO1xyXG4gICAgICAgIGRhdGFGaWVsZHM/OiBzdHJpbmc7XHJcbiAgICAgICAgZmlsdGVyRmllbGRzPzogc3RyaW5nO1xyXG4gICAgICAgIHJvd0ZpZWxkcz86IHN0cmluZztcclxuICAgIH0+O1xyXG4gICAgLyoqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuICovXHJcbiAgICB2aXNpYmxlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XHJcbiAgICAvKiogVGhpcyBtZW1iZXIgc3VwcG9ydHMgdGhlIGludGVybmFsIGluZnJhc3RydWN0dXJlIGFuZCBpcyBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBkaXJlY3RseSBmcm9tIHlvdXIgY29kZS4gKi9cclxuICAgIHdpZHRoQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyIHwgRnVuY3Rpb24gfCBzdHJpbmc+O1xyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgbmdab25lOiBOZ1pvbmUsIHRlbXBsYXRlSG9zdDogRHhUZW1wbGF0ZUhvc3QsIF93YXRjaGVySGVscGVyOiBXYXRjaGVySGVscGVyLCBfaWRoOiBJdGVyYWJsZURpZmZlckhlbHBlciwgb3B0aW9uSG9zdDogTmVzdGVkT3B0aW9uSG9zdCwgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSwgcGxhdGZvcm1JZDogYW55KTtcclxuICAgIHByb3RlY3RlZCBfY3JlYXRlSW5zdGFuY2UoZWxlbWVudDogYW55LCBvcHRpb25zOiBhbnkpOiBEeFBpdm90R3JpZEZpZWxkQ2hvb3NlcjtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcclxuICAgIHNldHVwQ2hhbmdlcyhwcm9wOiBzdHJpbmcsIGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdEb0NoZWNrKCk6IHZvaWQ7XHJcbiAgICBfc2V0T3B0aW9uKG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQ7XHJcbn1cclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRHhQaXZvdEdyaWRGaWVsZENob29zZXJNb2R1bGUge1xyXG59XHJcbiJdfQ==