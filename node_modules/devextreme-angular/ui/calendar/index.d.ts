/*!
 * devextreme-angular
 * Version: 20.1.7
 * Build date: Tue Aug 25 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DxCalendar from 'devextreme/ui/calendar';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/** The Calendar is a widget that displays a calendar and allows an end user to select the required date within a specified date range. */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxCalendarComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxCalendar;
    /** Specifies the shortcut key that sets focus on the widget. */
    accessKey: string;
    /** Specifies whether or not the widget changes its state when interacting with a user. */
    activeStateEnabled: boolean;
    /** Specifies a custom template for calendar cells. */
    cellTemplate: any;
    /** Specifies the date-time value serialization format. Use it only if you do not specify the value at design time. */
    dateSerializationFormat: string;
    /** Specifies whether the widget responds to user interaction. */
    disabled: boolean;
    /** Specifies dates that users cannot select. */
    disabledDates: Function | Array<Date>;
    /** Specifies the attributes to be attached to the widget's root element. */
    elementAttr: any;
    /** Specifies the first day of a week. */
    firstDayOfWeek: number | string;
    /** Specifies whether the widget can be focused using keyboard navigation. */
    focusStateEnabled: boolean;
    /** Specifies the widget's height. */
    height: number | Function | string;
    /** Specifies text for a hint that appears when a user pauses on the widget. */
    hint: string;
    /** Specifies whether the widget changes its state when a user pauses on it. */
    hoverStateEnabled: boolean;
    /** Specifies or indicates whether the editor's value is valid. */
    isValid: boolean;
    /** The latest date the widget allows to select. */
    max: Date | number | string;
    /** Specifies the maximum zoom level of the calendar. */
    maxZoomLevel: string;
    /** The earliest date the widget allows to select. */
    min: Date | number | string;
    /** Specifies the minimum zoom level of the calendar. */
    minZoomLevel: string;
    /** The value to be assigned to the `name` attribute of the underlying HTML element. */
    name: string;
    /** Specifies whether the editor is read-only. */
    readOnly: boolean;
    /** Switches the widget to a right-to-left representation. */
    rtlEnabled: boolean;
    /** Specifies whether or not the widget displays a button that selects the current date. */
    showTodayButton: boolean;
    /** Specifies the number of the element when the Tab key is used for navigating. */
    tabIndex: number;
    /** Information on the broken validation rule. Contains the first item from the validationErrors array. */
    validationError: any;
    /** An array of the validation rules that failed. */
    validationErrors: Array<any>;
    /** Specifies how the message about the validation rules that are not satisfied by this editor's value is displayed. */
    validationMessageMode: string;
    /** Indicates or specifies the current validation status. */
    validationStatus: string;
    /** An object or a value specifying the date and time currently selected in the calendar. */
    value: Date | number | string;
    /** Specifies whether the widget is visible. */
    visible: boolean;
    /** Specifies the widget's width. */
    width: number | Function | string;
    /** Specifies the current calendar zoom level. */
    zoomLevel: string;
    /** A function that is executed before the widget is disposed of. */
    onDisposing: EventEmitter<any>;
    /** A function used in JavaScript frameworks to save the widget instance. */
    onInitialized: EventEmitter<any>;
    /** A function that is executed after a widget option is changed. */
    onOptionChanged: EventEmitter<any>;
    /** A function that is executed after the widget's value is changed. */
    onValueChanged: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    accessKeyChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    activeStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    cellTemplateChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    dateSerializationFormatChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    disabledDatesChange: EventEmitter<Function | Array<Date>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    elementAttrChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    firstDayOfWeekChange: EventEmitter<number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    focusStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    heightChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hintChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    isValidChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    maxZoomLevelChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    minChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    minZoomLevelChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    nameChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    readOnlyChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    rtlEnabledChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    showTodayButtonChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    tabIndexChange: EventEmitter<number>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorChange: EventEmitter<any>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationErrorsChange: EventEmitter<Array<any>>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationMessageModeChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    validationStatusChange: EventEmitter<string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    valueChange: EventEmitter<Date | number | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    visibleChange: EventEmitter<boolean>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    widthChange: EventEmitter<number | Function | string>;
    /** This member supports the internal infrastructure and is not intended to be used directly from your code. */
    zoomLevelChange: EventEmitter<string>;
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxCalendar;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxCalendarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxCalendarComponent, "dx-calendar", never, {
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "cellTemplate": "cellTemplate";
    "dateSerializationFormat": "dateSerializationFormat";
    "disabled": "disabled";
    "disabledDates": "disabledDates";
    "elementAttr": "elementAttr";
    "firstDayOfWeek": "firstDayOfWeek";
    "focusStateEnabled": "focusStateEnabled";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "isValid": "isValid";
    "max": "max";
    "maxZoomLevel": "maxZoomLevel";
    "min": "min";
    "minZoomLevel": "minZoomLevel";
    "name": "name";
    "readOnly": "readOnly";
    "rtlEnabled": "rtlEnabled";
    "showTodayButton": "showTodayButton";
    "tabIndex": "tabIndex";
    "validationError": "validationError";
    "validationErrors": "validationErrors";
    "validationMessageMode": "validationMessageMode";
    "validationStatus": "validationStatus";
    "value": "value";
    "visible": "visible";
    "width": "width";
    "zoomLevel": "zoomLevel";
}, {
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "onValueChanged": "onValueChanged";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "cellTemplateChange": "cellTemplateChange";
    "dateSerializationFormatChange": "dateSerializationFormatChange";
    "disabledChange": "disabledChange";
    "disabledDatesChange": "disabledDatesChange";
    "elementAttrChange": "elementAttrChange";
    "firstDayOfWeekChange": "firstDayOfWeekChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "isValidChange": "isValidChange";
    "maxChange": "maxChange";
    "maxZoomLevelChange": "maxZoomLevelChange";
    "minChange": "minChange";
    "minZoomLevelChange": "minZoomLevelChange";
    "nameChange": "nameChange";
    "readOnlyChange": "readOnlyChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "showTodayButtonChange": "showTodayButtonChange";
    "tabIndexChange": "tabIndexChange";
    "validationErrorChange": "validationErrorChange";
    "validationErrorsChange": "validationErrorsChange";
    "validationMessageModeChange": "validationMessageModeChange";
    "validationStatusChange": "validationStatusChange";
    "valueChange": "valueChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
    "zoomLevelChange": "zoomLevelChange";
    "onBlur": "onBlur";
}, never>;
}
export declare class DxCalendarModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxCalendarModule, [typeof DxCalendarComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxCalendarComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxCalendarModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,